// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `date_type_option.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct DateTypeOption {
    // message fields
    pub date_format: DateFormat,
    pub time_format: TimeFormat,
    pub include_time: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DateTypeOption {
    fn default() -> &'a DateTypeOption {
        <DateTypeOption as ::protobuf::Message>::default_instance()
    }
}

impl DateTypeOption {
    pub fn new() -> DateTypeOption {
        ::std::default::Default::default()
    }

    // .DateFormat date_format = 1;


    pub fn get_date_format(&self) -> DateFormat {
        self.date_format
    }
    pub fn clear_date_format(&mut self) {
        self.date_format = DateFormat::Local;
    }

    // Param is passed by value, moved
    pub fn set_date_format(&mut self, v: DateFormat) {
        self.date_format = v;
    }

    // .TimeFormat time_format = 2;


    pub fn get_time_format(&self) -> TimeFormat {
        self.time_format
    }
    pub fn clear_time_format(&mut self) {
        self.time_format = TimeFormat::TwelveHour;
    }

    // Param is passed by value, moved
    pub fn set_time_format(&mut self, v: TimeFormat) {
        self.time_format = v;
    }

    // bool include_time = 3;


    pub fn get_include_time(&self) -> bool {
        self.include_time
    }
    pub fn clear_include_time(&mut self) {
        self.include_time = false;
    }

    // Param is passed by value, moved
    pub fn set_include_time(&mut self, v: bool) {
        self.include_time = v;
    }
}

impl ::protobuf::Message for DateTypeOption {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.date_format, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.time_format, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.include_time = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.date_format != DateFormat::Local {
            my_size += ::protobuf::rt::enum_size(1, self.date_format);
        }
        if self.time_format != TimeFormat::TwelveHour {
            my_size += ::protobuf::rt::enum_size(2, self.time_format);
        }
        if self.include_time != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.date_format != DateFormat::Local {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.date_format))?;
        }
        if self.time_format != TimeFormat::TwelveHour {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.time_format))?;
        }
        if self.include_time != false {
            os.write_bool(3, self.include_time)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DateTypeOption {
        DateTypeOption::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<DateFormat>>(
                "date_format",
                |m: &DateTypeOption| { &m.date_format },
                |m: &mut DateTypeOption| { &mut m.date_format },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TimeFormat>>(
                "time_format",
                |m: &DateTypeOption| { &m.time_format },
                |m: &mut DateTypeOption| { &mut m.time_format },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "include_time",
                |m: &DateTypeOption| { &m.include_time },
                |m: &mut DateTypeOption| { &mut m.include_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DateTypeOption>(
                "DateTypeOption",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DateTypeOption {
        static instance: ::protobuf::rt::LazyV2<DateTypeOption> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DateTypeOption::new)
    }
}

impl ::protobuf::Clear for DateTypeOption {
    fn clear(&mut self) {
        self.date_format = DateFormat::Local;
        self.time_format = TimeFormat::TwelveHour;
        self.include_time = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DateTypeOption {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DateTypeOption {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DateCellData {
    // message fields
    pub date: ::std::string::String,
    pub time: ::std::string::String,
    pub timestamp: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DateCellData {
    fn default() -> &'a DateCellData {
        <DateCellData as ::protobuf::Message>::default_instance()
    }
}

impl DateCellData {
    pub fn new() -> DateCellData {
        ::std::default::Default::default()
    }

    // string date = 1;


    pub fn get_date(&self) -> &str {
        &self.date
    }
    pub fn clear_date(&mut self) {
        self.date.clear();
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: ::std::string::String) {
        self.date = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_date(&mut self) -> &mut ::std::string::String {
        &mut self.date
    }

    // Take field
    pub fn take_date(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.date, ::std::string::String::new())
    }

    // string time = 2;


    pub fn get_time(&self) -> &str {
        &self.time
    }
    pub fn clear_time(&mut self) {
        self.time.clear();
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: ::std::string::String) {
        self.time = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_time(&mut self) -> &mut ::std::string::String {
        &mut self.time
    }

    // Take field
    pub fn take_time(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.time, ::std::string::String::new())
    }

    // int64 timestamp = 3;


    pub fn get_timestamp(&self) -> i64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for DateCellData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.date)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.time)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.date.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.date);
        }
        if !self.time.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.time);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(3, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.date.is_empty() {
            os.write_string(1, &self.date)?;
        }
        if !self.time.is_empty() {
            os.write_string(2, &self.time)?;
        }
        if self.timestamp != 0 {
            os.write_int64(3, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DateCellData {
        DateCellData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "date",
                |m: &DateCellData| { &m.date },
                |m: &mut DateCellData| { &mut m.date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "time",
                |m: &DateCellData| { &m.time },
                |m: &mut DateCellData| { &mut m.time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "timestamp",
                |m: &DateCellData| { &m.timestamp },
                |m: &mut DateCellData| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DateCellData>(
                "DateCellData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DateCellData {
        static instance: ::protobuf::rt::LazyV2<DateCellData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DateCellData::new)
    }
}

impl ::protobuf::Clear for DateCellData {
    fn clear(&mut self) {
        self.date.clear();
        self.time.clear();
        self.timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DateCellData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DateCellData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DateChangesetPayload {
    // message fields
    pub cell_identifier: ::protobuf::SingularPtrField<super::cell_entities::CellIdentifierPayload>,
    // message oneof groups
    pub one_of_date: ::std::option::Option<DateChangesetPayload_oneof_one_of_date>,
    pub one_of_time: ::std::option::Option<DateChangesetPayload_oneof_one_of_time>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DateChangesetPayload {
    fn default() -> &'a DateChangesetPayload {
        <DateChangesetPayload as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum DateChangesetPayload_oneof_one_of_date {
    date(::std::string::String),
}

#[derive(Clone,PartialEq,Debug)]
pub enum DateChangesetPayload_oneof_one_of_time {
    time(::std::string::String),
}

impl DateChangesetPayload {
    pub fn new() -> DateChangesetPayload {
        ::std::default::Default::default()
    }

    // .CellIdentifierPayload cell_identifier = 1;


    pub fn get_cell_identifier(&self) -> &super::cell_entities::CellIdentifierPayload {
        self.cell_identifier.as_ref().unwrap_or_else(|| <super::cell_entities::CellIdentifierPayload as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cell_identifier(&mut self) {
        self.cell_identifier.clear();
    }

    pub fn has_cell_identifier(&self) -> bool {
        self.cell_identifier.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cell_identifier(&mut self, v: super::cell_entities::CellIdentifierPayload) {
        self.cell_identifier = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cell_identifier(&mut self) -> &mut super::cell_entities::CellIdentifierPayload {
        if self.cell_identifier.is_none() {
            self.cell_identifier.set_default();
        }
        self.cell_identifier.as_mut().unwrap()
    }

    // Take field
    pub fn take_cell_identifier(&mut self) -> super::cell_entities::CellIdentifierPayload {
        self.cell_identifier.take().unwrap_or_else(|| super::cell_entities::CellIdentifierPayload::new())
    }

    // string date = 2;


    pub fn get_date(&self) -> &str {
        match self.one_of_date {
            ::std::option::Option::Some(DateChangesetPayload_oneof_one_of_date::date(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_date(&mut self) {
        self.one_of_date = ::std::option::Option::None;
    }

    pub fn has_date(&self) -> bool {
        match self.one_of_date {
            ::std::option::Option::Some(DateChangesetPayload_oneof_one_of_date::date(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: ::std::string::String) {
        self.one_of_date = ::std::option::Option::Some(DateChangesetPayload_oneof_one_of_date::date(v))
    }

    // Mutable pointer to the field.
    pub fn mut_date(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(DateChangesetPayload_oneof_one_of_date::date(_)) = self.one_of_date {
        } else {
            self.one_of_date = ::std::option::Option::Some(DateChangesetPayload_oneof_one_of_date::date(::std::string::String::new()));
        }
        match self.one_of_date {
            ::std::option::Option::Some(DateChangesetPayload_oneof_one_of_date::date(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_date(&mut self) -> ::std::string::String {
        if self.has_date() {
            match self.one_of_date.take() {
                ::std::option::Option::Some(DateChangesetPayload_oneof_one_of_date::date(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string time = 3;


    pub fn get_time(&self) -> &str {
        match self.one_of_time {
            ::std::option::Option::Some(DateChangesetPayload_oneof_one_of_time::time(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_time(&mut self) {
        self.one_of_time = ::std::option::Option::None;
    }

    pub fn has_time(&self) -> bool {
        match self.one_of_time {
            ::std::option::Option::Some(DateChangesetPayload_oneof_one_of_time::time(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: ::std::string::String) {
        self.one_of_time = ::std::option::Option::Some(DateChangesetPayload_oneof_one_of_time::time(v))
    }

    // Mutable pointer to the field.
    pub fn mut_time(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(DateChangesetPayload_oneof_one_of_time::time(_)) = self.one_of_time {
        } else {
            self.one_of_time = ::std::option::Option::Some(DateChangesetPayload_oneof_one_of_time::time(::std::string::String::new()));
        }
        match self.one_of_time {
            ::std::option::Option::Some(DateChangesetPayload_oneof_one_of_time::time(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_time(&mut self) -> ::std::string::String {
        if self.has_time() {
            match self.one_of_time.take() {
                ::std::option::Option::Some(DateChangesetPayload_oneof_one_of_time::time(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for DateChangesetPayload {
    fn is_initialized(&self) -> bool {
        for v in &self.cell_identifier {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cell_identifier)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_date = ::std::option::Option::Some(DateChangesetPayload_oneof_one_of_date::date(is.read_string()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_time = ::std::option::Option::Some(DateChangesetPayload_oneof_one_of_time::time(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.cell_identifier.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_date {
            match v {
                &DateChangesetPayload_oneof_one_of_date::date(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_time {
            match v {
                &DateChangesetPayload_oneof_one_of_time::time(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.cell_identifier.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_date {
            match v {
                &DateChangesetPayload_oneof_one_of_date::date(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_time {
            match v {
                &DateChangesetPayload_oneof_one_of_time::time(ref v) => {
                    os.write_string(3, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DateChangesetPayload {
        DateChangesetPayload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::cell_entities::CellIdentifierPayload>>(
                "cell_identifier",
                |m: &DateChangesetPayload| { &m.cell_identifier },
                |m: &mut DateChangesetPayload| { &mut m.cell_identifier },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "date",
                DateChangesetPayload::has_date,
                DateChangesetPayload::get_date,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "time",
                DateChangesetPayload::has_time,
                DateChangesetPayload::get_time,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DateChangesetPayload>(
                "DateChangesetPayload",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DateChangesetPayload {
        static instance: ::protobuf::rt::LazyV2<DateChangesetPayload> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DateChangesetPayload::new)
    }
}

impl ::protobuf::Clear for DateChangesetPayload {
    fn clear(&mut self) {
        self.cell_identifier.clear();
        self.one_of_date = ::std::option::Option::None;
        self.one_of_time = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DateChangesetPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DateChangesetPayload {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum DateFormat {
    Local = 0,
    US = 1,
    ISO = 2,
    Friendly = 3,
}

impl ::protobuf::ProtobufEnum for DateFormat {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DateFormat> {
        match value {
            0 => ::std::option::Option::Some(DateFormat::Local),
            1 => ::std::option::Option::Some(DateFormat::US),
            2 => ::std::option::Option::Some(DateFormat::ISO),
            3 => ::std::option::Option::Some(DateFormat::Friendly),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [DateFormat] = &[
            DateFormat::Local,
            DateFormat::US,
            DateFormat::ISO,
            DateFormat::Friendly,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<DateFormat>("DateFormat", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for DateFormat {
}

impl ::std::default::Default for DateFormat {
    fn default() -> Self {
        DateFormat::Local
    }
}

impl ::protobuf::reflect::ProtobufValue for DateFormat {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TimeFormat {
    TwelveHour = 0,
    TwentyFourHour = 1,
}

impl ::protobuf::ProtobufEnum for TimeFormat {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TimeFormat> {
        match value {
            0 => ::std::option::Option::Some(TimeFormat::TwelveHour),
            1 => ::std::option::Option::Some(TimeFormat::TwentyFourHour),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TimeFormat] = &[
            TimeFormat::TwelveHour,
            TimeFormat::TwentyFourHour,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<TimeFormat>("TimeFormat", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for TimeFormat {
}

impl ::std::default::Default for TimeFormat {
    fn default() -> Self {
        TimeFormat::TwelveHour
    }
}

impl ::protobuf::reflect::ProtobufValue for TimeFormat {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16date_type_option.proto\x1a\x13cell_entities.proto\"\x8f\x01\n\x0eD\
    ateTypeOption\x12,\n\x0bdate_format\x18\x01\x20\x01(\x0e2\x0b.DateFormat\
    R\ndateFormat\x12,\n\x0btime_format\x18\x02\x20\x01(\x0e2\x0b.TimeFormat\
    R\ntimeFormat\x12!\n\x0cinclude_time\x18\x03\x20\x01(\x08R\x0bincludeTim\
    e\"T\n\x0cDateCellData\x12\x12\n\x04date\x18\x01\x20\x01(\tR\x04date\x12\
    \x12\n\x04time\x18\x02\x20\x01(\tR\x04time\x12\x1c\n\ttimestamp\x18\x03\
    \x20\x01(\x03R\ttimestamp\"\xa1\x01\n\x14DateChangesetPayload\x12?\n\x0f\
    cell_identifier\x18\x01\x20\x01(\x0b2\x16.CellIdentifierPayloadR\x0ecell\
    Identifier\x12\x14\n\x04date\x18\x02\x20\x01(\tH\0R\x04date\x12\x14\n\
    \x04time\x18\x03\x20\x01(\tH\x01R\x04timeB\r\n\x0bone_of_dateB\r\n\x0bon\
    e_of_time*6\n\nDateFormat\x12\t\n\x05Local\x10\0\x12\x06\n\x02US\x10\x01\
    \x12\x07\n\x03ISO\x10\x02\x12\x0c\n\x08Friendly\x10\x03*0\n\nTimeFormat\
    \x12\x0e\n\nTwelveHour\x10\0\x12\x12\n\x0eTwentyFourHour\x10\x01b\x06pro\
    to3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
