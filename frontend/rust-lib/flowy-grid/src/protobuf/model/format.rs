// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `format.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum NumberFormat {
    Number = 0,
    USD = 1,
    CanadianDollar = 2,
    EUR = 4,
    Pound = 5,
    Yen = 6,
    Ruble = 7,
    Rupee = 8,
    Won = 9,
    Yuan = 10,
    Real = 11,
    Lira = 12,
    Rupiah = 13,
    Franc = 14,
    HongKongDollar = 15,
    NewZealandDollar = 16,
    Krona = 17,
    NorwegianKrone = 18,
    MexicanPeso = 19,
    Rand = 20,
    NewTaiwanDollar = 21,
    DanishKrone = 22,
    Baht = 23,
    Forint = 24,
    Koruna = 25,
    Shekel = 26,
    ChileanPeso = 27,
    PhilippinePeso = 28,
    Dirham = 29,
    ColombianPeso = 30,
    Riyal = 31,
    Ringgit = 32,
    Leu = 33,
    ArgentinePeso = 34,
    UruguayanPeso = 35,
    Percent = 36,
}

impl ::protobuf::ProtobufEnum for NumberFormat {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<NumberFormat> {
        match value {
            0 => ::std::option::Option::Some(NumberFormat::Number),
            1 => ::std::option::Option::Some(NumberFormat::USD),
            2 => ::std::option::Option::Some(NumberFormat::CanadianDollar),
            4 => ::std::option::Option::Some(NumberFormat::EUR),
            5 => ::std::option::Option::Some(NumberFormat::Pound),
            6 => ::std::option::Option::Some(NumberFormat::Yen),
            7 => ::std::option::Option::Some(NumberFormat::Ruble),
            8 => ::std::option::Option::Some(NumberFormat::Rupee),
            9 => ::std::option::Option::Some(NumberFormat::Won),
            10 => ::std::option::Option::Some(NumberFormat::Yuan),
            11 => ::std::option::Option::Some(NumberFormat::Real),
            12 => ::std::option::Option::Some(NumberFormat::Lira),
            13 => ::std::option::Option::Some(NumberFormat::Rupiah),
            14 => ::std::option::Option::Some(NumberFormat::Franc),
            15 => ::std::option::Option::Some(NumberFormat::HongKongDollar),
            16 => ::std::option::Option::Some(NumberFormat::NewZealandDollar),
            17 => ::std::option::Option::Some(NumberFormat::Krona),
            18 => ::std::option::Option::Some(NumberFormat::NorwegianKrone),
            19 => ::std::option::Option::Some(NumberFormat::MexicanPeso),
            20 => ::std::option::Option::Some(NumberFormat::Rand),
            21 => ::std::option::Option::Some(NumberFormat::NewTaiwanDollar),
            22 => ::std::option::Option::Some(NumberFormat::DanishKrone),
            23 => ::std::option::Option::Some(NumberFormat::Baht),
            24 => ::std::option::Option::Some(NumberFormat::Forint),
            25 => ::std::option::Option::Some(NumberFormat::Koruna),
            26 => ::std::option::Option::Some(NumberFormat::Shekel),
            27 => ::std::option::Option::Some(NumberFormat::ChileanPeso),
            28 => ::std::option::Option::Some(NumberFormat::PhilippinePeso),
            29 => ::std::option::Option::Some(NumberFormat::Dirham),
            30 => ::std::option::Option::Some(NumberFormat::ColombianPeso),
            31 => ::std::option::Option::Some(NumberFormat::Riyal),
            32 => ::std::option::Option::Some(NumberFormat::Ringgit),
            33 => ::std::option::Option::Some(NumberFormat::Leu),
            34 => ::std::option::Option::Some(NumberFormat::ArgentinePeso),
            35 => ::std::option::Option::Some(NumberFormat::UruguayanPeso),
            36 => ::std::option::Option::Some(NumberFormat::Percent),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [NumberFormat] = &[
            NumberFormat::Number,
            NumberFormat::USD,
            NumberFormat::CanadianDollar,
            NumberFormat::EUR,
            NumberFormat::Pound,
            NumberFormat::Yen,
            NumberFormat::Ruble,
            NumberFormat::Rupee,
            NumberFormat::Won,
            NumberFormat::Yuan,
            NumberFormat::Real,
            NumberFormat::Lira,
            NumberFormat::Rupiah,
            NumberFormat::Franc,
            NumberFormat::HongKongDollar,
            NumberFormat::NewZealandDollar,
            NumberFormat::Krona,
            NumberFormat::NorwegianKrone,
            NumberFormat::MexicanPeso,
            NumberFormat::Rand,
            NumberFormat::NewTaiwanDollar,
            NumberFormat::DanishKrone,
            NumberFormat::Baht,
            NumberFormat::Forint,
            NumberFormat::Koruna,
            NumberFormat::Shekel,
            NumberFormat::ChileanPeso,
            NumberFormat::PhilippinePeso,
            NumberFormat::Dirham,
            NumberFormat::ColombianPeso,
            NumberFormat::Riyal,
            NumberFormat::Ringgit,
            NumberFormat::Leu,
            NumberFormat::ArgentinePeso,
            NumberFormat::UruguayanPeso,
            NumberFormat::Percent,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<NumberFormat>("NumberFormat", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for NumberFormat {
}

impl ::std::default::Default for NumberFormat {
    fn default() -> Self {
        NumberFormat::Number
    }
}

impl ::protobuf::reflect::ProtobufValue for NumberFormat {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cformat.proto*\xf8\x03\n\x0cNumberFormat\x12\n\n\x06Number\x10\0\
    \x12\x07\n\x03USD\x10\x01\x12\x12\n\x0eCanadianDollar\x10\x02\x12\x07\n\
    \x03EUR\x10\x04\x12\t\n\x05Pound\x10\x05\x12\x07\n\x03Yen\x10\x06\x12\t\
    \n\x05Ruble\x10\x07\x12\t\n\x05Rupee\x10\x08\x12\x07\n\x03Won\x10\t\x12\
    \x08\n\x04Yuan\x10\n\x12\x08\n\x04Real\x10\x0b\x12\x08\n\x04Lira\x10\x0c\
    \x12\n\n\x06Rupiah\x10\r\x12\t\n\x05Franc\x10\x0e\x12\x12\n\x0eHongKongD\
    ollar\x10\x0f\x12\x14\n\x10NewZealandDollar\x10\x10\x12\t\n\x05Krona\x10\
    \x11\x12\x12\n\x0eNorwegianKrone\x10\x12\x12\x0f\n\x0bMexicanPeso\x10\
    \x13\x12\x08\n\x04Rand\x10\x14\x12\x13\n\x0fNewTaiwanDollar\x10\x15\x12\
    \x0f\n\x0bDanishKrone\x10\x16\x12\x08\n\x04Baht\x10\x17\x12\n\n\x06Forin\
    t\x10\x18\x12\n\n\x06Koruna\x10\x19\x12\n\n\x06Shekel\x10\x1a\x12\x0f\n\
    \x0bChileanPeso\x10\x1b\x12\x12\n\x0ePhilippinePeso\x10\x1c\x12\n\n\x06D\
    irham\x10\x1d\x12\x11\n\rColombianPeso\x10\x1e\x12\t\n\x05Riyal\x10\x1f\
    \x12\x0b\n\x07Ringgit\x10\x20\x12\x07\n\x03Leu\x10!\x12\x11\n\rArgentine\
    Peso\x10\"\x12\x11\n\rUruguayanPeso\x10#\x12\x0b\n\x07Percent\x10$b\x06p\
    roto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
