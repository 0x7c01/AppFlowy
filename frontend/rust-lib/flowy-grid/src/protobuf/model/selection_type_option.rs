// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `selection_type_option.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct SingleSelectTypeOption {
    // message fields
    pub options: ::protobuf::RepeatedField<SelectOption>,
    pub disable_color: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SingleSelectTypeOption {
    fn default() -> &'a SingleSelectTypeOption {
        <SingleSelectTypeOption as ::protobuf::Message>::default_instance()
    }
}

impl SingleSelectTypeOption {
    pub fn new() -> SingleSelectTypeOption {
        ::std::default::Default::default()
    }

    // repeated .SelectOption options = 1;


    pub fn get_options(&self) -> &[SelectOption] {
        &self.options
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: ::protobuf::RepeatedField<SelectOption>) {
        self.options = v;
    }

    // Mutable pointer to the field.
    pub fn mut_options(&mut self) -> &mut ::protobuf::RepeatedField<SelectOption> {
        &mut self.options
    }

    // Take field
    pub fn take_options(&mut self) -> ::protobuf::RepeatedField<SelectOption> {
        ::std::mem::replace(&mut self.options, ::protobuf::RepeatedField::new())
    }

    // bool disable_color = 2;


    pub fn get_disable_color(&self) -> bool {
        self.disable_color
    }
    pub fn clear_disable_color(&mut self) {
        self.disable_color = false;
    }

    // Param is passed by value, moved
    pub fn set_disable_color(&mut self, v: bool) {
        self.disable_color = v;
    }
}

impl ::protobuf::Message for SingleSelectTypeOption {
    fn is_initialized(&self) -> bool {
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.options)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.disable_color = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.options {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.disable_color != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.options {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.disable_color != false {
            os.write_bool(2, self.disable_color)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SingleSelectTypeOption {
        SingleSelectTypeOption::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SelectOption>>(
                "options",
                |m: &SingleSelectTypeOption| { &m.options },
                |m: &mut SingleSelectTypeOption| { &mut m.options },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "disable_color",
                |m: &SingleSelectTypeOption| { &m.disable_color },
                |m: &mut SingleSelectTypeOption| { &mut m.disable_color },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SingleSelectTypeOption>(
                "SingleSelectTypeOption",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SingleSelectTypeOption {
        static instance: ::protobuf::rt::LazyV2<SingleSelectTypeOption> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SingleSelectTypeOption::new)
    }
}

impl ::protobuf::Clear for SingleSelectTypeOption {
    fn clear(&mut self) {
        self.options.clear();
        self.disable_color = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SingleSelectTypeOption {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SingleSelectTypeOption {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MultiSelectTypeOption {
    // message fields
    pub options: ::protobuf::RepeatedField<SelectOption>,
    pub disable_color: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MultiSelectTypeOption {
    fn default() -> &'a MultiSelectTypeOption {
        <MultiSelectTypeOption as ::protobuf::Message>::default_instance()
    }
}

impl MultiSelectTypeOption {
    pub fn new() -> MultiSelectTypeOption {
        ::std::default::Default::default()
    }

    // repeated .SelectOption options = 1;


    pub fn get_options(&self) -> &[SelectOption] {
        &self.options
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: ::protobuf::RepeatedField<SelectOption>) {
        self.options = v;
    }

    // Mutable pointer to the field.
    pub fn mut_options(&mut self) -> &mut ::protobuf::RepeatedField<SelectOption> {
        &mut self.options
    }

    // Take field
    pub fn take_options(&mut self) -> ::protobuf::RepeatedField<SelectOption> {
        ::std::mem::replace(&mut self.options, ::protobuf::RepeatedField::new())
    }

    // bool disable_color = 2;


    pub fn get_disable_color(&self) -> bool {
        self.disable_color
    }
    pub fn clear_disable_color(&mut self) {
        self.disable_color = false;
    }

    // Param is passed by value, moved
    pub fn set_disable_color(&mut self, v: bool) {
        self.disable_color = v;
    }
}

impl ::protobuf::Message for MultiSelectTypeOption {
    fn is_initialized(&self) -> bool {
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.options)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.disable_color = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.options {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.disable_color != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.options {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.disable_color != false {
            os.write_bool(2, self.disable_color)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MultiSelectTypeOption {
        MultiSelectTypeOption::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SelectOption>>(
                "options",
                |m: &MultiSelectTypeOption| { &m.options },
                |m: &mut MultiSelectTypeOption| { &mut m.options },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "disable_color",
                |m: &MultiSelectTypeOption| { &m.disable_color },
                |m: &mut MultiSelectTypeOption| { &mut m.disable_color },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MultiSelectTypeOption>(
                "MultiSelectTypeOption",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MultiSelectTypeOption {
        static instance: ::protobuf::rt::LazyV2<MultiSelectTypeOption> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MultiSelectTypeOption::new)
    }
}

impl ::protobuf::Clear for MultiSelectTypeOption {
    fn clear(&mut self) {
        self.options.clear();
        self.disable_color = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MultiSelectTypeOption {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MultiSelectTypeOption {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SelectOption {
    // message fields
    pub id: ::std::string::String,
    pub name: ::std::string::String,
    pub color: SelectOptionColor,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SelectOption {
    fn default() -> &'a SelectOption {
        <SelectOption as ::protobuf::Message>::default_instance()
    }
}

impl SelectOption {
    pub fn new() -> SelectOption {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .SelectOptionColor color = 3;


    pub fn get_color(&self) -> SelectOptionColor {
        self.color
    }
    pub fn clear_color(&mut self) {
        self.color = SelectOptionColor::Purple;
    }

    // Param is passed by value, moved
    pub fn set_color(&mut self, v: SelectOptionColor) {
        self.color = v;
    }
}

impl ::protobuf::Message for SelectOption {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.color, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.color != SelectOptionColor::Purple {
            my_size += ::protobuf::rt::enum_size(3, self.color);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.color != SelectOptionColor::Purple {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.color))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SelectOption {
        SelectOption::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &SelectOption| { &m.id },
                |m: &mut SelectOption| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &SelectOption| { &m.name },
                |m: &mut SelectOption| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<SelectOptionColor>>(
                "color",
                |m: &SelectOption| { &m.color },
                |m: &mut SelectOption| { &mut m.color },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SelectOption>(
                "SelectOption",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SelectOption {
        static instance: ::protobuf::rt::LazyV2<SelectOption> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SelectOption::new)
    }
}

impl ::protobuf::Clear for SelectOption {
    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.color = SelectOptionColor::Purple;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SelectOption {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SelectOption {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SelectOptionChangesetPayload {
    // message fields
    pub cell_identifier: ::protobuf::SingularPtrField<super::cell_entities::CellIdentifierPayload>,
    // message oneof groups
    pub one_of_insert_option: ::std::option::Option<SelectOptionChangesetPayload_oneof_one_of_insert_option>,
    pub one_of_update_option: ::std::option::Option<SelectOptionChangesetPayload_oneof_one_of_update_option>,
    pub one_of_delete_option: ::std::option::Option<SelectOptionChangesetPayload_oneof_one_of_delete_option>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SelectOptionChangesetPayload {
    fn default() -> &'a SelectOptionChangesetPayload {
        <SelectOptionChangesetPayload as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum SelectOptionChangesetPayload_oneof_one_of_insert_option {
    insert_option(SelectOption),
}

#[derive(Clone,PartialEq,Debug)]
pub enum SelectOptionChangesetPayload_oneof_one_of_update_option {
    update_option(SelectOption),
}

#[derive(Clone,PartialEq,Debug)]
pub enum SelectOptionChangesetPayload_oneof_one_of_delete_option {
    delete_option(SelectOption),
}

impl SelectOptionChangesetPayload {
    pub fn new() -> SelectOptionChangesetPayload {
        ::std::default::Default::default()
    }

    // .CellIdentifierPayload cell_identifier = 1;


    pub fn get_cell_identifier(&self) -> &super::cell_entities::CellIdentifierPayload {
        self.cell_identifier.as_ref().unwrap_or_else(|| <super::cell_entities::CellIdentifierPayload as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cell_identifier(&mut self) {
        self.cell_identifier.clear();
    }

    pub fn has_cell_identifier(&self) -> bool {
        self.cell_identifier.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cell_identifier(&mut self, v: super::cell_entities::CellIdentifierPayload) {
        self.cell_identifier = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cell_identifier(&mut self) -> &mut super::cell_entities::CellIdentifierPayload {
        if self.cell_identifier.is_none() {
            self.cell_identifier.set_default();
        }
        self.cell_identifier.as_mut().unwrap()
    }

    // Take field
    pub fn take_cell_identifier(&mut self) -> super::cell_entities::CellIdentifierPayload {
        self.cell_identifier.take().unwrap_or_else(|| super::cell_entities::CellIdentifierPayload::new())
    }

    // .SelectOption insert_option = 2;


    pub fn get_insert_option(&self) -> &SelectOption {
        match self.one_of_insert_option {
            ::std::option::Option::Some(SelectOptionChangesetPayload_oneof_one_of_insert_option::insert_option(ref v)) => v,
            _ => <SelectOption as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_insert_option(&mut self) {
        self.one_of_insert_option = ::std::option::Option::None;
    }

    pub fn has_insert_option(&self) -> bool {
        match self.one_of_insert_option {
            ::std::option::Option::Some(SelectOptionChangesetPayload_oneof_one_of_insert_option::insert_option(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_insert_option(&mut self, v: SelectOption) {
        self.one_of_insert_option = ::std::option::Option::Some(SelectOptionChangesetPayload_oneof_one_of_insert_option::insert_option(v))
    }

    // Mutable pointer to the field.
    pub fn mut_insert_option(&mut self) -> &mut SelectOption {
        if let ::std::option::Option::Some(SelectOptionChangesetPayload_oneof_one_of_insert_option::insert_option(_)) = self.one_of_insert_option {
        } else {
            self.one_of_insert_option = ::std::option::Option::Some(SelectOptionChangesetPayload_oneof_one_of_insert_option::insert_option(SelectOption::new()));
        }
        match self.one_of_insert_option {
            ::std::option::Option::Some(SelectOptionChangesetPayload_oneof_one_of_insert_option::insert_option(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_insert_option(&mut self) -> SelectOption {
        if self.has_insert_option() {
            match self.one_of_insert_option.take() {
                ::std::option::Option::Some(SelectOptionChangesetPayload_oneof_one_of_insert_option::insert_option(v)) => v,
                _ => panic!(),
            }
        } else {
            SelectOption::new()
        }
    }

    // .SelectOption update_option = 3;


    pub fn get_update_option(&self) -> &SelectOption {
        match self.one_of_update_option {
            ::std::option::Option::Some(SelectOptionChangesetPayload_oneof_one_of_update_option::update_option(ref v)) => v,
            _ => <SelectOption as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_update_option(&mut self) {
        self.one_of_update_option = ::std::option::Option::None;
    }

    pub fn has_update_option(&self) -> bool {
        match self.one_of_update_option {
            ::std::option::Option::Some(SelectOptionChangesetPayload_oneof_one_of_update_option::update_option(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_update_option(&mut self, v: SelectOption) {
        self.one_of_update_option = ::std::option::Option::Some(SelectOptionChangesetPayload_oneof_one_of_update_option::update_option(v))
    }

    // Mutable pointer to the field.
    pub fn mut_update_option(&mut self) -> &mut SelectOption {
        if let ::std::option::Option::Some(SelectOptionChangesetPayload_oneof_one_of_update_option::update_option(_)) = self.one_of_update_option {
        } else {
            self.one_of_update_option = ::std::option::Option::Some(SelectOptionChangesetPayload_oneof_one_of_update_option::update_option(SelectOption::new()));
        }
        match self.one_of_update_option {
            ::std::option::Option::Some(SelectOptionChangesetPayload_oneof_one_of_update_option::update_option(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_update_option(&mut self) -> SelectOption {
        if self.has_update_option() {
            match self.one_of_update_option.take() {
                ::std::option::Option::Some(SelectOptionChangesetPayload_oneof_one_of_update_option::update_option(v)) => v,
                _ => panic!(),
            }
        } else {
            SelectOption::new()
        }
    }

    // .SelectOption delete_option = 4;


    pub fn get_delete_option(&self) -> &SelectOption {
        match self.one_of_delete_option {
            ::std::option::Option::Some(SelectOptionChangesetPayload_oneof_one_of_delete_option::delete_option(ref v)) => v,
            _ => <SelectOption as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_delete_option(&mut self) {
        self.one_of_delete_option = ::std::option::Option::None;
    }

    pub fn has_delete_option(&self) -> bool {
        match self.one_of_delete_option {
            ::std::option::Option::Some(SelectOptionChangesetPayload_oneof_one_of_delete_option::delete_option(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_delete_option(&mut self, v: SelectOption) {
        self.one_of_delete_option = ::std::option::Option::Some(SelectOptionChangesetPayload_oneof_one_of_delete_option::delete_option(v))
    }

    // Mutable pointer to the field.
    pub fn mut_delete_option(&mut self) -> &mut SelectOption {
        if let ::std::option::Option::Some(SelectOptionChangesetPayload_oneof_one_of_delete_option::delete_option(_)) = self.one_of_delete_option {
        } else {
            self.one_of_delete_option = ::std::option::Option::Some(SelectOptionChangesetPayload_oneof_one_of_delete_option::delete_option(SelectOption::new()));
        }
        match self.one_of_delete_option {
            ::std::option::Option::Some(SelectOptionChangesetPayload_oneof_one_of_delete_option::delete_option(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_delete_option(&mut self) -> SelectOption {
        if self.has_delete_option() {
            match self.one_of_delete_option.take() {
                ::std::option::Option::Some(SelectOptionChangesetPayload_oneof_one_of_delete_option::delete_option(v)) => v,
                _ => panic!(),
            }
        } else {
            SelectOption::new()
        }
    }
}

impl ::protobuf::Message for SelectOptionChangesetPayload {
    fn is_initialized(&self) -> bool {
        for v in &self.cell_identifier {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(SelectOptionChangesetPayload_oneof_one_of_insert_option::insert_option(ref v)) = self.one_of_insert_option {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SelectOptionChangesetPayload_oneof_one_of_update_option::update_option(ref v)) = self.one_of_update_option {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SelectOptionChangesetPayload_oneof_one_of_delete_option::delete_option(ref v)) = self.one_of_delete_option {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cell_identifier)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_insert_option = ::std::option::Option::Some(SelectOptionChangesetPayload_oneof_one_of_insert_option::insert_option(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_update_option = ::std::option::Option::Some(SelectOptionChangesetPayload_oneof_one_of_update_option::update_option(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_delete_option = ::std::option::Option::Some(SelectOptionChangesetPayload_oneof_one_of_delete_option::delete_option(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.cell_identifier.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_insert_option {
            match v {
                &SelectOptionChangesetPayload_oneof_one_of_insert_option::insert_option(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_update_option {
            match v {
                &SelectOptionChangesetPayload_oneof_one_of_update_option::update_option(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_delete_option {
            match v {
                &SelectOptionChangesetPayload_oneof_one_of_delete_option::delete_option(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.cell_identifier.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_insert_option {
            match v {
                &SelectOptionChangesetPayload_oneof_one_of_insert_option::insert_option(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_update_option {
            match v {
                &SelectOptionChangesetPayload_oneof_one_of_update_option::update_option(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_delete_option {
            match v {
                &SelectOptionChangesetPayload_oneof_one_of_delete_option::delete_option(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SelectOptionChangesetPayload {
        SelectOptionChangesetPayload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::cell_entities::CellIdentifierPayload>>(
                "cell_identifier",
                |m: &SelectOptionChangesetPayload| { &m.cell_identifier },
                |m: &mut SelectOptionChangesetPayload| { &mut m.cell_identifier },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SelectOption>(
                "insert_option",
                SelectOptionChangesetPayload::has_insert_option,
                SelectOptionChangesetPayload::get_insert_option,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SelectOption>(
                "update_option",
                SelectOptionChangesetPayload::has_update_option,
                SelectOptionChangesetPayload::get_update_option,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SelectOption>(
                "delete_option",
                SelectOptionChangesetPayload::has_delete_option,
                SelectOptionChangesetPayload::get_delete_option,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SelectOptionChangesetPayload>(
                "SelectOptionChangesetPayload",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SelectOptionChangesetPayload {
        static instance: ::protobuf::rt::LazyV2<SelectOptionChangesetPayload> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SelectOptionChangesetPayload::new)
    }
}

impl ::protobuf::Clear for SelectOptionChangesetPayload {
    fn clear(&mut self) {
        self.cell_identifier.clear();
        self.one_of_insert_option = ::std::option::Option::None;
        self.one_of_update_option = ::std::option::Option::None;
        self.one_of_delete_option = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SelectOptionChangesetPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SelectOptionChangesetPayload {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SelectOptionCellChangesetPayload {
    // message fields
    pub cell_identifier: ::protobuf::SingularPtrField<super::cell_entities::CellIdentifierPayload>,
    // message oneof groups
    pub one_of_insert_option_id: ::std::option::Option<SelectOptionCellChangesetPayload_oneof_one_of_insert_option_id>,
    pub one_of_delete_option_id: ::std::option::Option<SelectOptionCellChangesetPayload_oneof_one_of_delete_option_id>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SelectOptionCellChangesetPayload {
    fn default() -> &'a SelectOptionCellChangesetPayload {
        <SelectOptionCellChangesetPayload as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum SelectOptionCellChangesetPayload_oneof_one_of_insert_option_id {
    insert_option_id(::std::string::String),
}

#[derive(Clone,PartialEq,Debug)]
pub enum SelectOptionCellChangesetPayload_oneof_one_of_delete_option_id {
    delete_option_id(::std::string::String),
}

impl SelectOptionCellChangesetPayload {
    pub fn new() -> SelectOptionCellChangesetPayload {
        ::std::default::Default::default()
    }

    // .CellIdentifierPayload cell_identifier = 1;


    pub fn get_cell_identifier(&self) -> &super::cell_entities::CellIdentifierPayload {
        self.cell_identifier.as_ref().unwrap_or_else(|| <super::cell_entities::CellIdentifierPayload as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cell_identifier(&mut self) {
        self.cell_identifier.clear();
    }

    pub fn has_cell_identifier(&self) -> bool {
        self.cell_identifier.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cell_identifier(&mut self, v: super::cell_entities::CellIdentifierPayload) {
        self.cell_identifier = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cell_identifier(&mut self) -> &mut super::cell_entities::CellIdentifierPayload {
        if self.cell_identifier.is_none() {
            self.cell_identifier.set_default();
        }
        self.cell_identifier.as_mut().unwrap()
    }

    // Take field
    pub fn take_cell_identifier(&mut self) -> super::cell_entities::CellIdentifierPayload {
        self.cell_identifier.take().unwrap_or_else(|| super::cell_entities::CellIdentifierPayload::new())
    }

    // string insert_option_id = 2;


    pub fn get_insert_option_id(&self) -> &str {
        match self.one_of_insert_option_id {
            ::std::option::Option::Some(SelectOptionCellChangesetPayload_oneof_one_of_insert_option_id::insert_option_id(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_insert_option_id(&mut self) {
        self.one_of_insert_option_id = ::std::option::Option::None;
    }

    pub fn has_insert_option_id(&self) -> bool {
        match self.one_of_insert_option_id {
            ::std::option::Option::Some(SelectOptionCellChangesetPayload_oneof_one_of_insert_option_id::insert_option_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_insert_option_id(&mut self, v: ::std::string::String) {
        self.one_of_insert_option_id = ::std::option::Option::Some(SelectOptionCellChangesetPayload_oneof_one_of_insert_option_id::insert_option_id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_insert_option_id(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(SelectOptionCellChangesetPayload_oneof_one_of_insert_option_id::insert_option_id(_)) = self.one_of_insert_option_id {
        } else {
            self.one_of_insert_option_id = ::std::option::Option::Some(SelectOptionCellChangesetPayload_oneof_one_of_insert_option_id::insert_option_id(::std::string::String::new()));
        }
        match self.one_of_insert_option_id {
            ::std::option::Option::Some(SelectOptionCellChangesetPayload_oneof_one_of_insert_option_id::insert_option_id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_insert_option_id(&mut self) -> ::std::string::String {
        if self.has_insert_option_id() {
            match self.one_of_insert_option_id.take() {
                ::std::option::Option::Some(SelectOptionCellChangesetPayload_oneof_one_of_insert_option_id::insert_option_id(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string delete_option_id = 3;


    pub fn get_delete_option_id(&self) -> &str {
        match self.one_of_delete_option_id {
            ::std::option::Option::Some(SelectOptionCellChangesetPayload_oneof_one_of_delete_option_id::delete_option_id(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_delete_option_id(&mut self) {
        self.one_of_delete_option_id = ::std::option::Option::None;
    }

    pub fn has_delete_option_id(&self) -> bool {
        match self.one_of_delete_option_id {
            ::std::option::Option::Some(SelectOptionCellChangesetPayload_oneof_one_of_delete_option_id::delete_option_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_delete_option_id(&mut self, v: ::std::string::String) {
        self.one_of_delete_option_id = ::std::option::Option::Some(SelectOptionCellChangesetPayload_oneof_one_of_delete_option_id::delete_option_id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_delete_option_id(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(SelectOptionCellChangesetPayload_oneof_one_of_delete_option_id::delete_option_id(_)) = self.one_of_delete_option_id {
        } else {
            self.one_of_delete_option_id = ::std::option::Option::Some(SelectOptionCellChangesetPayload_oneof_one_of_delete_option_id::delete_option_id(::std::string::String::new()));
        }
        match self.one_of_delete_option_id {
            ::std::option::Option::Some(SelectOptionCellChangesetPayload_oneof_one_of_delete_option_id::delete_option_id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_delete_option_id(&mut self) -> ::std::string::String {
        if self.has_delete_option_id() {
            match self.one_of_delete_option_id.take() {
                ::std::option::Option::Some(SelectOptionCellChangesetPayload_oneof_one_of_delete_option_id::delete_option_id(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for SelectOptionCellChangesetPayload {
    fn is_initialized(&self) -> bool {
        for v in &self.cell_identifier {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cell_identifier)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_insert_option_id = ::std::option::Option::Some(SelectOptionCellChangesetPayload_oneof_one_of_insert_option_id::insert_option_id(is.read_string()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_delete_option_id = ::std::option::Option::Some(SelectOptionCellChangesetPayload_oneof_one_of_delete_option_id::delete_option_id(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.cell_identifier.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_insert_option_id {
            match v {
                &SelectOptionCellChangesetPayload_oneof_one_of_insert_option_id::insert_option_id(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_delete_option_id {
            match v {
                &SelectOptionCellChangesetPayload_oneof_one_of_delete_option_id::delete_option_id(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.cell_identifier.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_insert_option_id {
            match v {
                &SelectOptionCellChangesetPayload_oneof_one_of_insert_option_id::insert_option_id(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_delete_option_id {
            match v {
                &SelectOptionCellChangesetPayload_oneof_one_of_delete_option_id::delete_option_id(ref v) => {
                    os.write_string(3, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SelectOptionCellChangesetPayload {
        SelectOptionCellChangesetPayload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::cell_entities::CellIdentifierPayload>>(
                "cell_identifier",
                |m: &SelectOptionCellChangesetPayload| { &m.cell_identifier },
                |m: &mut SelectOptionCellChangesetPayload| { &mut m.cell_identifier },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "insert_option_id",
                SelectOptionCellChangesetPayload::has_insert_option_id,
                SelectOptionCellChangesetPayload::get_insert_option_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "delete_option_id",
                SelectOptionCellChangesetPayload::has_delete_option_id,
                SelectOptionCellChangesetPayload::get_delete_option_id,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SelectOptionCellChangesetPayload>(
                "SelectOptionCellChangesetPayload",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SelectOptionCellChangesetPayload {
        static instance: ::protobuf::rt::LazyV2<SelectOptionCellChangesetPayload> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SelectOptionCellChangesetPayload::new)
    }
}

impl ::protobuf::Clear for SelectOptionCellChangesetPayload {
    fn clear(&mut self) {
        self.cell_identifier.clear();
        self.one_of_insert_option_id = ::std::option::Option::None;
        self.one_of_delete_option_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SelectOptionCellChangesetPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SelectOptionCellChangesetPayload {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SelectOptionContext {
    // message fields
    pub options: ::protobuf::RepeatedField<SelectOption>,
    pub select_options: ::protobuf::RepeatedField<SelectOption>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SelectOptionContext {
    fn default() -> &'a SelectOptionContext {
        <SelectOptionContext as ::protobuf::Message>::default_instance()
    }
}

impl SelectOptionContext {
    pub fn new() -> SelectOptionContext {
        ::std::default::Default::default()
    }

    // repeated .SelectOption options = 1;


    pub fn get_options(&self) -> &[SelectOption] {
        &self.options
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: ::protobuf::RepeatedField<SelectOption>) {
        self.options = v;
    }

    // Mutable pointer to the field.
    pub fn mut_options(&mut self) -> &mut ::protobuf::RepeatedField<SelectOption> {
        &mut self.options
    }

    // Take field
    pub fn take_options(&mut self) -> ::protobuf::RepeatedField<SelectOption> {
        ::std::mem::replace(&mut self.options, ::protobuf::RepeatedField::new())
    }

    // repeated .SelectOption select_options = 2;


    pub fn get_select_options(&self) -> &[SelectOption] {
        &self.select_options
    }
    pub fn clear_select_options(&mut self) {
        self.select_options.clear();
    }

    // Param is passed by value, moved
    pub fn set_select_options(&mut self, v: ::protobuf::RepeatedField<SelectOption>) {
        self.select_options = v;
    }

    // Mutable pointer to the field.
    pub fn mut_select_options(&mut self) -> &mut ::protobuf::RepeatedField<SelectOption> {
        &mut self.select_options
    }

    // Take field
    pub fn take_select_options(&mut self) -> ::protobuf::RepeatedField<SelectOption> {
        ::std::mem::replace(&mut self.select_options, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SelectOptionContext {
    fn is_initialized(&self) -> bool {
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.select_options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.options)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.select_options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.options {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.select_options {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.options {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.select_options {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SelectOptionContext {
        SelectOptionContext::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SelectOption>>(
                "options",
                |m: &SelectOptionContext| { &m.options },
                |m: &mut SelectOptionContext| { &mut m.options },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SelectOption>>(
                "select_options",
                |m: &SelectOptionContext| { &m.select_options },
                |m: &mut SelectOptionContext| { &mut m.select_options },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SelectOptionContext>(
                "SelectOptionContext",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SelectOptionContext {
        static instance: ::protobuf::rt::LazyV2<SelectOptionContext> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SelectOptionContext::new)
    }
}

impl ::protobuf::Clear for SelectOptionContext {
    fn clear(&mut self) {
        self.options.clear();
        self.select_options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SelectOptionContext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SelectOptionContext {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SelectOptionColor {
    Purple = 0,
    Pink = 1,
    LightPink = 2,
    Orange = 3,
    Yellow = 4,
    Lime = 5,
    Green = 6,
    Aqua = 7,
    Blue = 8,
}

impl ::protobuf::ProtobufEnum for SelectOptionColor {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SelectOptionColor> {
        match value {
            0 => ::std::option::Option::Some(SelectOptionColor::Purple),
            1 => ::std::option::Option::Some(SelectOptionColor::Pink),
            2 => ::std::option::Option::Some(SelectOptionColor::LightPink),
            3 => ::std::option::Option::Some(SelectOptionColor::Orange),
            4 => ::std::option::Option::Some(SelectOptionColor::Yellow),
            5 => ::std::option::Option::Some(SelectOptionColor::Lime),
            6 => ::std::option::Option::Some(SelectOptionColor::Green),
            7 => ::std::option::Option::Some(SelectOptionColor::Aqua),
            8 => ::std::option::Option::Some(SelectOptionColor::Blue),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SelectOptionColor] = &[
            SelectOptionColor::Purple,
            SelectOptionColor::Pink,
            SelectOptionColor::LightPink,
            SelectOptionColor::Orange,
            SelectOptionColor::Yellow,
            SelectOptionColor::Lime,
            SelectOptionColor::Green,
            SelectOptionColor::Aqua,
            SelectOptionColor::Blue,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<SelectOptionColor>("SelectOptionColor", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for SelectOptionColor {
}

impl ::std::default::Default for SelectOptionColor {
    fn default() -> Self {
        SelectOptionColor::Purple
    }
}

impl ::protobuf::reflect::ProtobufValue for SelectOptionColor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bselection_type_option.proto\x1a\x13cell_entities.proto\"f\n\x16Sin\
    gleSelectTypeOption\x12'\n\x07options\x18\x01\x20\x03(\x0b2\r.SelectOpti\
    onR\x07options\x12#\n\rdisable_color\x18\x02\x20\x01(\x08R\x0cdisableCol\
    or\"e\n\x15MultiSelectTypeOption\x12'\n\x07options\x18\x01\x20\x03(\x0b2\
    \r.SelectOptionR\x07options\x12#\n\rdisable_color\x18\x02\x20\x01(\x08R\
    \x0cdisableColor\"\\\n\x0cSelectOption\x12\x0e\n\x02id\x18\x01\x20\x01(\
    \tR\x02id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12(\n\x05color\
    \x18\x03\x20\x01(\x0e2\x12.SelectOptionColorR\x05color\"\xc9\x02\n\x1cSe\
    lectOptionChangesetPayload\x12?\n\x0fcell_identifier\x18\x01\x20\x01(\
    \x0b2\x16.CellIdentifierPayloadR\x0ecellIdentifier\x124\n\rinsert_option\
    \x18\x02\x20\x01(\x0b2\r.SelectOptionH\0R\x0cinsertOption\x124\n\rupdate\
    _option\x18\x03\x20\x01(\x0b2\r.SelectOptionH\x01R\x0cupdateOption\x124\
    \n\rdelete_option\x18\x04\x20\x01(\x0b2\r.SelectOptionH\x02R\x0cdeleteOp\
    tionB\x16\n\x14one_of_insert_optionB\x16\n\x14one_of_update_optionB\x16\
    \n\x14one_of_delete_option\"\xf1\x01\n\x20SelectOptionCellChangesetPaylo\
    ad\x12?\n\x0fcell_identifier\x18\x01\x20\x01(\x0b2\x16.CellIdentifierPay\
    loadR\x0ecellIdentifier\x12*\n\x10insert_option_id\x18\x02\x20\x01(\tH\0\
    R\x0einsertOptionId\x12*\n\x10delete_option_id\x18\x03\x20\x01(\tH\x01R\
    \x0edeleteOptionIdB\x19\n\x17one_of_insert_option_idB\x19\n\x17one_of_de\
    lete_option_id\"t\n\x13SelectOptionContext\x12'\n\x07options\x18\x01\x20\
    \x03(\x0b2\r.SelectOptionR\x07options\x124\n\x0eselect_options\x18\x02\
    \x20\x03(\x0b2\r.SelectOptionR\rselectOptions*y\n\x11SelectOptionColor\
    \x12\n\n\x06Purple\x10\0\x12\x08\n\x04Pink\x10\x01\x12\r\n\tLightPink\
    \x10\x02\x12\n\n\x06Orange\x10\x03\x12\n\n\x06Yellow\x10\x04\x12\x08\n\
    \x04Lime\x10\x05\x12\t\n\x05Green\x10\x06\x12\x08\n\x04Aqua\x10\x07\x12\
    \x08\n\x04Blue\x10\x08b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
