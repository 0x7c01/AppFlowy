// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `view_info.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct ViewInfo {
    // message fields
    pub id: ::std::string::String,
    pub belong_to_id: ::std::string::String,
    pub name: ::std::string::String,
    pub desc: ::std::string::String,
    pub data_type: super::view::ViewDataType,
    pub belongings: ::protobuf::SingularPtrField<super::view::RepeatedView>,
    pub ext_data: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ViewInfo {
    fn default() -> &'a ViewInfo {
        <ViewInfo as ::protobuf::Message>::default_instance()
    }
}

impl ViewInfo {
    pub fn new() -> ViewInfo {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string belong_to_id = 2;


    pub fn get_belong_to_id(&self) -> &str {
        &self.belong_to_id
    }
    pub fn clear_belong_to_id(&mut self) {
        self.belong_to_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_belong_to_id(&mut self, v: ::std::string::String) {
        self.belong_to_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_belong_to_id(&mut self) -> &mut ::std::string::String {
        &mut self.belong_to_id
    }

    // Take field
    pub fn take_belong_to_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.belong_to_id, ::std::string::String::new())
    }

    // string name = 3;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string desc = 4;


    pub fn get_desc(&self) -> &str {
        &self.desc
    }
    pub fn clear_desc(&mut self) {
        self.desc.clear();
    }

    // Param is passed by value, moved
    pub fn set_desc(&mut self, v: ::std::string::String) {
        self.desc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_desc(&mut self) -> &mut ::std::string::String {
        &mut self.desc
    }

    // Take field
    pub fn take_desc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.desc, ::std::string::String::new())
    }

    // .ViewDataType data_type = 5;


    pub fn get_data_type(&self) -> super::view::ViewDataType {
        self.data_type
    }
    pub fn clear_data_type(&mut self) {
        self.data_type = super::view::ViewDataType::TextBlock;
    }

    // Param is passed by value, moved
    pub fn set_data_type(&mut self, v: super::view::ViewDataType) {
        self.data_type = v;
    }

    // .RepeatedView belongings = 6;


    pub fn get_belongings(&self) -> &super::view::RepeatedView {
        self.belongings.as_ref().unwrap_or_else(|| <super::view::RepeatedView as ::protobuf::Message>::default_instance())
    }
    pub fn clear_belongings(&mut self) {
        self.belongings.clear();
    }

    pub fn has_belongings(&self) -> bool {
        self.belongings.is_some()
    }

    // Param is passed by value, moved
    pub fn set_belongings(&mut self, v: super::view::RepeatedView) {
        self.belongings = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_belongings(&mut self) -> &mut super::view::RepeatedView {
        if self.belongings.is_none() {
            self.belongings.set_default();
        }
        self.belongings.as_mut().unwrap()
    }

    // Take field
    pub fn take_belongings(&mut self) -> super::view::RepeatedView {
        self.belongings.take().unwrap_or_else(|| super::view::RepeatedView::new())
    }

    // string ext_data = 7;


    pub fn get_ext_data(&self) -> &str {
        &self.ext_data
    }
    pub fn clear_ext_data(&mut self) {
        self.ext_data.clear();
    }

    // Param is passed by value, moved
    pub fn set_ext_data(&mut self, v: ::std::string::String) {
        self.ext_data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ext_data(&mut self) -> &mut ::std::string::String {
        &mut self.ext_data
    }

    // Take field
    pub fn take_ext_data(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ext_data, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ViewInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.belongings {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.belong_to_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.desc)?;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.data_type, 5, &mut self.unknown_fields)?
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.belongings)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ext_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.belong_to_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.belong_to_id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        if !self.desc.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.desc);
        }
        if self.data_type != super::view::ViewDataType::TextBlock {
            my_size += ::protobuf::rt::enum_size(5, self.data_type);
        }
        if let Some(ref v) = self.belongings.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.ext_data.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.ext_data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.belong_to_id.is_empty() {
            os.write_string(2, &self.belong_to_id)?;
        }
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        if !self.desc.is_empty() {
            os.write_string(4, &self.desc)?;
        }
        if self.data_type != super::view::ViewDataType::TextBlock {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&self.data_type))?;
        }
        if let Some(ref v) = self.belongings.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.ext_data.is_empty() {
            os.write_string(7, &self.ext_data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ViewInfo {
        ViewInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &ViewInfo| { &m.id },
                |m: &mut ViewInfo| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "belong_to_id",
                |m: &ViewInfo| { &m.belong_to_id },
                |m: &mut ViewInfo| { &mut m.belong_to_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ViewInfo| { &m.name },
                |m: &mut ViewInfo| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "desc",
                |m: &ViewInfo| { &m.desc },
                |m: &mut ViewInfo| { &mut m.desc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::view::ViewDataType>>(
                "data_type",
                |m: &ViewInfo| { &m.data_type },
                |m: &mut ViewInfo| { &mut m.data_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::view::RepeatedView>>(
                "belongings",
                |m: &ViewInfo| { &m.belongings },
                |m: &mut ViewInfo| { &mut m.belongings },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ext_data",
                |m: &ViewInfo| { &m.ext_data },
                |m: &mut ViewInfo| { &mut m.ext_data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ViewInfo>(
                "ViewInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ViewInfo {
        static instance: ::protobuf::rt::LazyV2<ViewInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ViewInfo::new)
    }
}

impl ::protobuf::Clear for ViewInfo {
    fn clear(&mut self) {
        self.id.clear();
        self.belong_to_id.clear();
        self.name.clear();
        self.desc.clear();
        self.data_type = super::view::ViewDataType::TextBlock;
        self.belongings.clear();
        self.ext_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ViewInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ViewInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fview_info.proto\x1a\nview.proto\"\xda\x01\n\x08ViewInfo\x12\x0e\n\
    \x02id\x18\x01\x20\x01(\tR\x02id\x12\x20\n\x0cbelong_to_id\x18\x02\x20\
    \x01(\tR\nbelongToId\x12\x12\n\x04name\x18\x03\x20\x01(\tR\x04name\x12\
    \x12\n\x04desc\x18\x04\x20\x01(\tR\x04desc\x12*\n\tdata_type\x18\x05\x20\
    \x01(\x0e2\r.ViewDataTypeR\x08dataType\x12-\n\nbelongings\x18\x06\x20\
    \x01(\x0b2\r.RepeatedViewR\nbelongings\x12\x19\n\x08ext_data\x18\x07\x20\
    \x01(\tR\x07extDatab\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
