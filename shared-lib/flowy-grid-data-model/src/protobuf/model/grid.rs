// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `grid.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct Grid {
    // message fields
    pub id: ::std::string::String,
    pub field_orders: ::protobuf::RepeatedField<FieldOrder>,
    pub block_orders: ::protobuf::RepeatedField<GridBlockOrder>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Grid {
    fn default() -> &'a Grid {
        <Grid as ::protobuf::Message>::default_instance()
    }
}

impl Grid {
    pub fn new() -> Grid {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // repeated .FieldOrder field_orders = 2;


    pub fn get_field_orders(&self) -> &[FieldOrder] {
        &self.field_orders
    }
    pub fn clear_field_orders(&mut self) {
        self.field_orders.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_orders(&mut self, v: ::protobuf::RepeatedField<FieldOrder>) {
        self.field_orders = v;
    }

    // Mutable pointer to the field.
    pub fn mut_field_orders(&mut self) -> &mut ::protobuf::RepeatedField<FieldOrder> {
        &mut self.field_orders
    }

    // Take field
    pub fn take_field_orders(&mut self) -> ::protobuf::RepeatedField<FieldOrder> {
        ::std::mem::replace(&mut self.field_orders, ::protobuf::RepeatedField::new())
    }

    // repeated .GridBlockOrder block_orders = 3;


    pub fn get_block_orders(&self) -> &[GridBlockOrder] {
        &self.block_orders
    }
    pub fn clear_block_orders(&mut self) {
        self.block_orders.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_orders(&mut self, v: ::protobuf::RepeatedField<GridBlockOrder>) {
        self.block_orders = v;
    }

    // Mutable pointer to the field.
    pub fn mut_block_orders(&mut self) -> &mut ::protobuf::RepeatedField<GridBlockOrder> {
        &mut self.block_orders
    }

    // Take field
    pub fn take_block_orders(&mut self) -> ::protobuf::RepeatedField<GridBlockOrder> {
        ::std::mem::replace(&mut self.block_orders, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Grid {
    fn is_initialized(&self) -> bool {
        for v in &self.field_orders {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.block_orders {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.field_orders)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.block_orders)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        for value in &self.field_orders {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.block_orders {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        for v in &self.field_orders {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.block_orders {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Grid {
        Grid::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Grid| { &m.id },
                |m: &mut Grid| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FieldOrder>>(
                "field_orders",
                |m: &Grid| { &m.field_orders },
                |m: &mut Grid| { &mut m.field_orders },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GridBlockOrder>>(
                "block_orders",
                |m: &Grid| { &m.block_orders },
                |m: &mut Grid| { &mut m.block_orders },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Grid>(
                "Grid",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Grid {
        static instance: ::protobuf::rt::LazyV2<Grid> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Grid::new)
    }
}

impl ::protobuf::Clear for Grid {
    fn clear(&mut self) {
        self.id.clear();
        self.field_orders.clear();
        self.block_orders.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Grid {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Grid {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Field {
    // message fields
    pub id: ::std::string::String,
    pub name: ::std::string::String,
    pub desc: ::std::string::String,
    pub field_type: FieldType,
    pub frozen: bool,
    pub visibility: bool,
    pub width: i32,
    pub is_primary: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Field {
    fn default() -> &'a Field {
        <Field as ::protobuf::Message>::default_instance()
    }
}

impl Field {
    pub fn new() -> Field {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string desc = 3;


    pub fn get_desc(&self) -> &str {
        &self.desc
    }
    pub fn clear_desc(&mut self) {
        self.desc.clear();
    }

    // Param is passed by value, moved
    pub fn set_desc(&mut self, v: ::std::string::String) {
        self.desc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_desc(&mut self) -> &mut ::std::string::String {
        &mut self.desc
    }

    // Take field
    pub fn take_desc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.desc, ::std::string::String::new())
    }

    // .FieldType field_type = 4;


    pub fn get_field_type(&self) -> FieldType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = FieldType::RichText;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: FieldType) {
        self.field_type = v;
    }

    // bool frozen = 5;


    pub fn get_frozen(&self) -> bool {
        self.frozen
    }
    pub fn clear_frozen(&mut self) {
        self.frozen = false;
    }

    // Param is passed by value, moved
    pub fn set_frozen(&mut self, v: bool) {
        self.frozen = v;
    }

    // bool visibility = 6;


    pub fn get_visibility(&self) -> bool {
        self.visibility
    }
    pub fn clear_visibility(&mut self) {
        self.visibility = false;
    }

    // Param is passed by value, moved
    pub fn set_visibility(&mut self, v: bool) {
        self.visibility = v;
    }

    // int32 width = 7;


    pub fn get_width(&self) -> i32 {
        self.width
    }
    pub fn clear_width(&mut self) {
        self.width = 0;
    }

    // Param is passed by value, moved
    pub fn set_width(&mut self, v: i32) {
        self.width = v;
    }

    // bool is_primary = 8;


    pub fn get_is_primary(&self) -> bool {
        self.is_primary
    }
    pub fn clear_is_primary(&mut self) {
        self.is_primary = false;
    }

    // Param is passed by value, moved
    pub fn set_is_primary(&mut self, v: bool) {
        self.is_primary = v;
    }
}

impl ::protobuf::Message for Field {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.desc)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 4, &mut self.unknown_fields)?
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.frozen = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.visibility = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.width = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_primary = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.desc.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.desc);
        }
        if self.field_type != FieldType::RichText {
            my_size += ::protobuf::rt::enum_size(4, self.field_type);
        }
        if self.frozen != false {
            my_size += 2;
        }
        if self.visibility != false {
            my_size += 2;
        }
        if self.width != 0 {
            my_size += ::protobuf::rt::value_size(7, self.width, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.is_primary != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.desc.is_empty() {
            os.write_string(3, &self.desc)?;
        }
        if self.field_type != FieldType::RichText {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if self.frozen != false {
            os.write_bool(5, self.frozen)?;
        }
        if self.visibility != false {
            os.write_bool(6, self.visibility)?;
        }
        if self.width != 0 {
            os.write_int32(7, self.width)?;
        }
        if self.is_primary != false {
            os.write_bool(8, self.is_primary)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Field {
        Field::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Field| { &m.id },
                |m: &mut Field| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Field| { &m.name },
                |m: &mut Field| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "desc",
                |m: &Field| { &m.desc },
                |m: &mut Field| { &mut m.desc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<FieldType>>(
                "field_type",
                |m: &Field| { &m.field_type },
                |m: &mut Field| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "frozen",
                |m: &Field| { &m.frozen },
                |m: &mut Field| { &mut m.frozen },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "visibility",
                |m: &Field| { &m.visibility },
                |m: &mut Field| { &mut m.visibility },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "width",
                |m: &Field| { &m.width },
                |m: &mut Field| { &mut m.width },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_primary",
                |m: &Field| { &m.is_primary },
                |m: &mut Field| { &mut m.is_primary },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Field>(
                "Field",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Field {
        static instance: ::protobuf::rt::LazyV2<Field> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Field::new)
    }
}

impl ::protobuf::Clear for Field {
    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.desc.clear();
        self.field_type = FieldType::RichText;
        self.frozen = false;
        self.visibility = false;
        self.width = 0;
        self.is_primary = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Field {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Field {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FieldOrder {
    // message fields
    pub field_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FieldOrder {
    fn default() -> &'a FieldOrder {
        <FieldOrder as ::protobuf::Message>::default_instance()
    }
}

impl FieldOrder {
    pub fn new() -> FieldOrder {
        ::std::default::Default::default()
    }

    // string field_id = 1;


    pub fn get_field_id(&self) -> &str {
        &self.field_id
    }
    pub fn clear_field_id(&mut self) {
        self.field_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_id(&mut self, v: ::std::string::String) {
        self.field_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_id(&mut self) -> &mut ::std::string::String {
        &mut self.field_id
    }

    // Take field
    pub fn take_field_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for FieldOrder {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.field_id.is_empty() {
            os.write_string(1, &self.field_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FieldOrder {
        FieldOrder::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "field_id",
                |m: &FieldOrder| { &m.field_id },
                |m: &mut FieldOrder| { &mut m.field_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FieldOrder>(
                "FieldOrder",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FieldOrder {
        static instance: ::protobuf::rt::LazyV2<FieldOrder> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FieldOrder::new)
    }
}

impl ::protobuf::Clear for FieldOrder {
    fn clear(&mut self) {
        self.field_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FieldOrder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FieldOrder {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GridFieldChangeset {
    // message fields
    pub grid_id: ::std::string::String,
    pub inserted_fields: ::protobuf::RepeatedField<IndexField>,
    pub deleted_fields: ::protobuf::RepeatedField<FieldOrder>,
    pub updated_fields: ::protobuf::RepeatedField<Field>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GridFieldChangeset {
    fn default() -> &'a GridFieldChangeset {
        <GridFieldChangeset as ::protobuf::Message>::default_instance()
    }
}

impl GridFieldChangeset {
    pub fn new() -> GridFieldChangeset {
        ::std::default::Default::default()
    }

    // string grid_id = 1;


    pub fn get_grid_id(&self) -> &str {
        &self.grid_id
    }
    pub fn clear_grid_id(&mut self) {
        self.grid_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_grid_id(&mut self, v: ::std::string::String) {
        self.grid_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_grid_id(&mut self) -> &mut ::std::string::String {
        &mut self.grid_id
    }

    // Take field
    pub fn take_grid_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.grid_id, ::std::string::String::new())
    }

    // repeated .IndexField inserted_fields = 2;


    pub fn get_inserted_fields(&self) -> &[IndexField] {
        &self.inserted_fields
    }
    pub fn clear_inserted_fields(&mut self) {
        self.inserted_fields.clear();
    }

    // Param is passed by value, moved
    pub fn set_inserted_fields(&mut self, v: ::protobuf::RepeatedField<IndexField>) {
        self.inserted_fields = v;
    }

    // Mutable pointer to the field.
    pub fn mut_inserted_fields(&mut self) -> &mut ::protobuf::RepeatedField<IndexField> {
        &mut self.inserted_fields
    }

    // Take field
    pub fn take_inserted_fields(&mut self) -> ::protobuf::RepeatedField<IndexField> {
        ::std::mem::replace(&mut self.inserted_fields, ::protobuf::RepeatedField::new())
    }

    // repeated .FieldOrder deleted_fields = 3;


    pub fn get_deleted_fields(&self) -> &[FieldOrder] {
        &self.deleted_fields
    }
    pub fn clear_deleted_fields(&mut self) {
        self.deleted_fields.clear();
    }

    // Param is passed by value, moved
    pub fn set_deleted_fields(&mut self, v: ::protobuf::RepeatedField<FieldOrder>) {
        self.deleted_fields = v;
    }

    // Mutable pointer to the field.
    pub fn mut_deleted_fields(&mut self) -> &mut ::protobuf::RepeatedField<FieldOrder> {
        &mut self.deleted_fields
    }

    // Take field
    pub fn take_deleted_fields(&mut self) -> ::protobuf::RepeatedField<FieldOrder> {
        ::std::mem::replace(&mut self.deleted_fields, ::protobuf::RepeatedField::new())
    }

    // repeated .Field updated_fields = 4;


    pub fn get_updated_fields(&self) -> &[Field] {
        &self.updated_fields
    }
    pub fn clear_updated_fields(&mut self) {
        self.updated_fields.clear();
    }

    // Param is passed by value, moved
    pub fn set_updated_fields(&mut self, v: ::protobuf::RepeatedField<Field>) {
        self.updated_fields = v;
    }

    // Mutable pointer to the field.
    pub fn mut_updated_fields(&mut self) -> &mut ::protobuf::RepeatedField<Field> {
        &mut self.updated_fields
    }

    // Take field
    pub fn take_updated_fields(&mut self) -> ::protobuf::RepeatedField<Field> {
        ::std::mem::replace(&mut self.updated_fields, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GridFieldChangeset {
    fn is_initialized(&self) -> bool {
        for v in &self.inserted_fields {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.deleted_fields {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updated_fields {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.grid_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.inserted_fields)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.deleted_fields)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.updated_fields)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.grid_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.grid_id);
        }
        for value in &self.inserted_fields {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.deleted_fields {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.updated_fields {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.grid_id.is_empty() {
            os.write_string(1, &self.grid_id)?;
        }
        for v in &self.inserted_fields {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.deleted_fields {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.updated_fields {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GridFieldChangeset {
        GridFieldChangeset::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "grid_id",
                |m: &GridFieldChangeset| { &m.grid_id },
                |m: &mut GridFieldChangeset| { &mut m.grid_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<IndexField>>(
                "inserted_fields",
                |m: &GridFieldChangeset| { &m.inserted_fields },
                |m: &mut GridFieldChangeset| { &mut m.inserted_fields },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FieldOrder>>(
                "deleted_fields",
                |m: &GridFieldChangeset| { &m.deleted_fields },
                |m: &mut GridFieldChangeset| { &mut m.deleted_fields },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Field>>(
                "updated_fields",
                |m: &GridFieldChangeset| { &m.updated_fields },
                |m: &mut GridFieldChangeset| { &mut m.updated_fields },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GridFieldChangeset>(
                "GridFieldChangeset",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GridFieldChangeset {
        static instance: ::protobuf::rt::LazyV2<GridFieldChangeset> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GridFieldChangeset::new)
    }
}

impl ::protobuf::Clear for GridFieldChangeset {
    fn clear(&mut self) {
        self.grid_id.clear();
        self.inserted_fields.clear();
        self.deleted_fields.clear();
        self.updated_fields.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GridFieldChangeset {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GridFieldChangeset {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IndexField {
    // message fields
    pub field: ::protobuf::SingularPtrField<Field>,
    pub index: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IndexField {
    fn default() -> &'a IndexField {
        <IndexField as ::protobuf::Message>::default_instance()
    }
}

impl IndexField {
    pub fn new() -> IndexField {
        ::std::default::Default::default()
    }

    // .Field field = 1;


    pub fn get_field(&self) -> &Field {
        self.field.as_ref().unwrap_or_else(|| <Field as ::protobuf::Message>::default_instance())
    }
    pub fn clear_field(&mut self) {
        self.field.clear();
    }

    pub fn has_field(&self) -> bool {
        self.field.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field(&mut self, v: Field) {
        self.field = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field(&mut self) -> &mut Field {
        if self.field.is_none() {
            self.field.set_default();
        }
        self.field.as_mut().unwrap()
    }

    // Take field
    pub fn take_field(&mut self) -> Field {
        self.field.take().unwrap_or_else(|| Field::new())
    }

    // int32 index = 2;


    pub fn get_index(&self) -> i32 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: i32) {
        self.index = v;
    }
}

impl ::protobuf::Message for IndexField {
    fn is_initialized(&self) -> bool {
        for v in &self.field {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.field)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.index = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.field.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(2, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.field.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.index != 0 {
            os.write_int32(2, self.index)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IndexField {
        IndexField::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Field>>(
                "field",
                |m: &IndexField| { &m.field },
                |m: &mut IndexField| { &mut m.field },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "index",
                |m: &IndexField| { &m.index },
                |m: &mut IndexField| { &mut m.index },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<IndexField>(
                "IndexField",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static IndexField {
        static instance: ::protobuf::rt::LazyV2<IndexField> = ::protobuf::rt::LazyV2::INIT;
        instance.get(IndexField::new)
    }
}

impl ::protobuf::Clear for IndexField {
    fn clear(&mut self) {
        self.field.clear();
        self.index = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IndexField {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IndexField {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetEditFieldContextPayload {
    // message fields
    pub grid_id: ::std::string::String,
    pub field_type: FieldType,
    // message oneof groups
    pub one_of_field_id: ::std::option::Option<GetEditFieldContextPayload_oneof_one_of_field_id>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetEditFieldContextPayload {
    fn default() -> &'a GetEditFieldContextPayload {
        <GetEditFieldContextPayload as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum GetEditFieldContextPayload_oneof_one_of_field_id {
    field_id(::std::string::String),
}

impl GetEditFieldContextPayload {
    pub fn new() -> GetEditFieldContextPayload {
        ::std::default::Default::default()
    }

    // string grid_id = 1;


    pub fn get_grid_id(&self) -> &str {
        &self.grid_id
    }
    pub fn clear_grid_id(&mut self) {
        self.grid_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_grid_id(&mut self, v: ::std::string::String) {
        self.grid_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_grid_id(&mut self) -> &mut ::std::string::String {
        &mut self.grid_id
    }

    // Take field
    pub fn take_grid_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.grid_id, ::std::string::String::new())
    }

    // string field_id = 2;


    pub fn get_field_id(&self) -> &str {
        match self.one_of_field_id {
            ::std::option::Option::Some(GetEditFieldContextPayload_oneof_one_of_field_id::field_id(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_field_id(&mut self) {
        self.one_of_field_id = ::std::option::Option::None;
    }

    pub fn has_field_id(&self) -> bool {
        match self.one_of_field_id {
            ::std::option::Option::Some(GetEditFieldContextPayload_oneof_one_of_field_id::field_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_field_id(&mut self, v: ::std::string::String) {
        self.one_of_field_id = ::std::option::Option::Some(GetEditFieldContextPayload_oneof_one_of_field_id::field_id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_field_id(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(GetEditFieldContextPayload_oneof_one_of_field_id::field_id(_)) = self.one_of_field_id {
        } else {
            self.one_of_field_id = ::std::option::Option::Some(GetEditFieldContextPayload_oneof_one_of_field_id::field_id(::std::string::String::new()));
        }
        match self.one_of_field_id {
            ::std::option::Option::Some(GetEditFieldContextPayload_oneof_one_of_field_id::field_id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_field_id(&mut self) -> ::std::string::String {
        if self.has_field_id() {
            match self.one_of_field_id.take() {
                ::std::option::Option::Some(GetEditFieldContextPayload_oneof_one_of_field_id::field_id(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .FieldType field_type = 3;


    pub fn get_field_type(&self) -> FieldType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = FieldType::RichText;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: FieldType) {
        self.field_type = v;
    }
}

impl ::protobuf::Message for GetEditFieldContextPayload {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.grid_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_field_id = ::std::option::Option::Some(GetEditFieldContextPayload_oneof_one_of_field_id::field_id(is.read_string()?));
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.grid_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.grid_id);
        }
        if self.field_type != FieldType::RichText {
            my_size += ::protobuf::rt::enum_size(3, self.field_type);
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_field_id {
            match v {
                &GetEditFieldContextPayload_oneof_one_of_field_id::field_id(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.grid_id.is_empty() {
            os.write_string(1, &self.grid_id)?;
        }
        if self.field_type != FieldType::RichText {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_field_id {
            match v {
                &GetEditFieldContextPayload_oneof_one_of_field_id::field_id(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetEditFieldContextPayload {
        GetEditFieldContextPayload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "grid_id",
                |m: &GetEditFieldContextPayload| { &m.grid_id },
                |m: &mut GetEditFieldContextPayload| { &mut m.grid_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "field_id",
                GetEditFieldContextPayload::has_field_id,
                GetEditFieldContextPayload::get_field_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<FieldType>>(
                "field_type",
                |m: &GetEditFieldContextPayload| { &m.field_type },
                |m: &mut GetEditFieldContextPayload| { &mut m.field_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetEditFieldContextPayload>(
                "GetEditFieldContextPayload",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetEditFieldContextPayload {
        static instance: ::protobuf::rt::LazyV2<GetEditFieldContextPayload> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetEditFieldContextPayload::new)
    }
}

impl ::protobuf::Clear for GetEditFieldContextPayload {
    fn clear(&mut self) {
        self.grid_id.clear();
        self.one_of_field_id = ::std::option::Option::None;
        self.field_type = FieldType::RichText;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetEditFieldContextPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetEditFieldContextPayload {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EditFieldPayload {
    // message fields
    pub grid_id: ::std::string::String,
    pub field_id: ::std::string::String,
    pub field_type: FieldType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EditFieldPayload {
    fn default() -> &'a EditFieldPayload {
        <EditFieldPayload as ::protobuf::Message>::default_instance()
    }
}

impl EditFieldPayload {
    pub fn new() -> EditFieldPayload {
        ::std::default::Default::default()
    }

    // string grid_id = 1;


    pub fn get_grid_id(&self) -> &str {
        &self.grid_id
    }
    pub fn clear_grid_id(&mut self) {
        self.grid_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_grid_id(&mut self, v: ::std::string::String) {
        self.grid_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_grid_id(&mut self) -> &mut ::std::string::String {
        &mut self.grid_id
    }

    // Take field
    pub fn take_grid_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.grid_id, ::std::string::String::new())
    }

    // string field_id = 2;


    pub fn get_field_id(&self) -> &str {
        &self.field_id
    }
    pub fn clear_field_id(&mut self) {
        self.field_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_id(&mut self, v: ::std::string::String) {
        self.field_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_id(&mut self) -> &mut ::std::string::String {
        &mut self.field_id
    }

    // Take field
    pub fn take_field_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_id, ::std::string::String::new())
    }

    // .FieldType field_type = 3;


    pub fn get_field_type(&self) -> FieldType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = FieldType::RichText;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: FieldType) {
        self.field_type = v;
    }
}

impl ::protobuf::Message for EditFieldPayload {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.grid_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_id)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.grid_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.grid_id);
        }
        if !self.field_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.field_id);
        }
        if self.field_type != FieldType::RichText {
            my_size += ::protobuf::rt::enum_size(3, self.field_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.grid_id.is_empty() {
            os.write_string(1, &self.grid_id)?;
        }
        if !self.field_id.is_empty() {
            os.write_string(2, &self.field_id)?;
        }
        if self.field_type != FieldType::RichText {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EditFieldPayload {
        EditFieldPayload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "grid_id",
                |m: &EditFieldPayload| { &m.grid_id },
                |m: &mut EditFieldPayload| { &mut m.grid_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "field_id",
                |m: &EditFieldPayload| { &m.field_id },
                |m: &mut EditFieldPayload| { &mut m.field_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<FieldType>>(
                "field_type",
                |m: &EditFieldPayload| { &m.field_type },
                |m: &mut EditFieldPayload| { &mut m.field_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EditFieldPayload>(
                "EditFieldPayload",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EditFieldPayload {
        static instance: ::protobuf::rt::LazyV2<EditFieldPayload> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EditFieldPayload::new)
    }
}

impl ::protobuf::Clear for EditFieldPayload {
    fn clear(&mut self) {
        self.grid_id.clear();
        self.field_id.clear();
        self.field_type = FieldType::RichText;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EditFieldPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EditFieldPayload {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EditFieldContext {
    // message fields
    pub grid_id: ::std::string::String,
    pub grid_field: ::protobuf::SingularPtrField<Field>,
    pub type_option_data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EditFieldContext {
    fn default() -> &'a EditFieldContext {
        <EditFieldContext as ::protobuf::Message>::default_instance()
    }
}

impl EditFieldContext {
    pub fn new() -> EditFieldContext {
        ::std::default::Default::default()
    }

    // string grid_id = 1;


    pub fn get_grid_id(&self) -> &str {
        &self.grid_id
    }
    pub fn clear_grid_id(&mut self) {
        self.grid_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_grid_id(&mut self, v: ::std::string::String) {
        self.grid_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_grid_id(&mut self) -> &mut ::std::string::String {
        &mut self.grid_id
    }

    // Take field
    pub fn take_grid_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.grid_id, ::std::string::String::new())
    }

    // .Field grid_field = 2;


    pub fn get_grid_field(&self) -> &Field {
        self.grid_field.as_ref().unwrap_or_else(|| <Field as ::protobuf::Message>::default_instance())
    }
    pub fn clear_grid_field(&mut self) {
        self.grid_field.clear();
    }

    pub fn has_grid_field(&self) -> bool {
        self.grid_field.is_some()
    }

    // Param is passed by value, moved
    pub fn set_grid_field(&mut self, v: Field) {
        self.grid_field = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_grid_field(&mut self) -> &mut Field {
        if self.grid_field.is_none() {
            self.grid_field.set_default();
        }
        self.grid_field.as_mut().unwrap()
    }

    // Take field
    pub fn take_grid_field(&mut self) -> Field {
        self.grid_field.take().unwrap_or_else(|| Field::new())
    }

    // bytes type_option_data = 3;


    pub fn get_type_option_data(&self) -> &[u8] {
        &self.type_option_data
    }
    pub fn clear_type_option_data(&mut self) {
        self.type_option_data.clear();
    }

    // Param is passed by value, moved
    pub fn set_type_option_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.type_option_data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type_option_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.type_option_data
    }

    // Take field
    pub fn take_type_option_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.type_option_data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for EditFieldContext {
    fn is_initialized(&self) -> bool {
        for v in &self.grid_field {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.grid_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.grid_field)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.type_option_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.grid_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.grid_id);
        }
        if let Some(ref v) = self.grid_field.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.type_option_data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.type_option_data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.grid_id.is_empty() {
            os.write_string(1, &self.grid_id)?;
        }
        if let Some(ref v) = self.grid_field.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.type_option_data.is_empty() {
            os.write_bytes(3, &self.type_option_data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EditFieldContext {
        EditFieldContext::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "grid_id",
                |m: &EditFieldContext| { &m.grid_id },
                |m: &mut EditFieldContext| { &mut m.grid_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Field>>(
                "grid_field",
                |m: &EditFieldContext| { &m.grid_field },
                |m: &mut EditFieldContext| { &mut m.grid_field },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "type_option_data",
                |m: &EditFieldContext| { &m.type_option_data },
                |m: &mut EditFieldContext| { &mut m.type_option_data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EditFieldContext>(
                "EditFieldContext",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EditFieldContext {
        static instance: ::protobuf::rt::LazyV2<EditFieldContext> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EditFieldContext::new)
    }
}

impl ::protobuf::Clear for EditFieldContext {
    fn clear(&mut self) {
        self.grid_id.clear();
        self.grid_field.clear();
        self.type_option_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EditFieldContext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EditFieldContext {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RepeatedField {
    // message fields
    pub items: ::protobuf::RepeatedField<Field>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RepeatedField {
    fn default() -> &'a RepeatedField {
        <RepeatedField as ::protobuf::Message>::default_instance()
    }
}

impl RepeatedField {
    pub fn new() -> RepeatedField {
        ::std::default::Default::default()
    }

    // repeated .Field items = 1;


    pub fn get_items(&self) -> &[Field] {
        &self.items
    }
    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::protobuf::RepeatedField<Field>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::protobuf::RepeatedField<Field> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::protobuf::RepeatedField<Field> {
        ::std::mem::replace(&mut self.items, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RepeatedField {
    fn is_initialized(&self) -> bool {
        for v in &self.items {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.items)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.items {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RepeatedField {
        RepeatedField::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Field>>(
                "items",
                |m: &RepeatedField| { &m.items },
                |m: &mut RepeatedField| { &mut m.items },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RepeatedField>(
                "RepeatedField",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RepeatedField {
        static instance: ::protobuf::rt::LazyV2<RepeatedField> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RepeatedField::new)
    }
}

impl ::protobuf::Clear for RepeatedField {
    fn clear(&mut self) {
        self.items.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RepeatedField {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RepeatedField {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RepeatedFieldOrder {
    // message fields
    pub items: ::protobuf::RepeatedField<FieldOrder>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RepeatedFieldOrder {
    fn default() -> &'a RepeatedFieldOrder {
        <RepeatedFieldOrder as ::protobuf::Message>::default_instance()
    }
}

impl RepeatedFieldOrder {
    pub fn new() -> RepeatedFieldOrder {
        ::std::default::Default::default()
    }

    // repeated .FieldOrder items = 1;


    pub fn get_items(&self) -> &[FieldOrder] {
        &self.items
    }
    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::protobuf::RepeatedField<FieldOrder>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::protobuf::RepeatedField<FieldOrder> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::protobuf::RepeatedField<FieldOrder> {
        ::std::mem::replace(&mut self.items, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RepeatedFieldOrder {
    fn is_initialized(&self) -> bool {
        for v in &self.items {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.items)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.items {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RepeatedFieldOrder {
        RepeatedFieldOrder::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FieldOrder>>(
                "items",
                |m: &RepeatedFieldOrder| { &m.items },
                |m: &mut RepeatedFieldOrder| { &mut m.items },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RepeatedFieldOrder>(
                "RepeatedFieldOrder",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RepeatedFieldOrder {
        static instance: ::protobuf::rt::LazyV2<RepeatedFieldOrder> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RepeatedFieldOrder::new)
    }
}

impl ::protobuf::Clear for RepeatedFieldOrder {
    fn clear(&mut self) {
        self.items.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RepeatedFieldOrder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RepeatedFieldOrder {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RowOrder {
    // message fields
    pub row_id: ::std::string::String,
    pub block_id: ::std::string::String,
    pub height: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RowOrder {
    fn default() -> &'a RowOrder {
        <RowOrder as ::protobuf::Message>::default_instance()
    }
}

impl RowOrder {
    pub fn new() -> RowOrder {
        ::std::default::Default::default()
    }

    // string row_id = 1;


    pub fn get_row_id(&self) -> &str {
        &self.row_id
    }
    pub fn clear_row_id(&mut self) {
        self.row_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_row_id(&mut self, v: ::std::string::String) {
        self.row_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_row_id(&mut self) -> &mut ::std::string::String {
        &mut self.row_id
    }

    // Take field
    pub fn take_row_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.row_id, ::std::string::String::new())
    }

    // string block_id = 2;


    pub fn get_block_id(&self) -> &str {
        &self.block_id
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: ::std::string::String) {
        self.block_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut ::std::string::String {
        &mut self.block_id
    }

    // Take field
    pub fn take_block_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.block_id, ::std::string::String::new())
    }

    // int32 height = 3;


    pub fn get_height(&self) -> i32 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: i32) {
        self.height = v;
    }
}

impl ::protobuf::Message for RowOrder {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.row_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.block_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.height = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.row_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.row_id);
        }
        if !self.block_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.block_id);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(3, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.row_id.is_empty() {
            os.write_string(1, &self.row_id)?;
        }
        if !self.block_id.is_empty() {
            os.write_string(2, &self.block_id)?;
        }
        if self.height != 0 {
            os.write_int32(3, self.height)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RowOrder {
        RowOrder::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "row_id",
                |m: &RowOrder| { &m.row_id },
                |m: &mut RowOrder| { &mut m.row_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "block_id",
                |m: &RowOrder| { &m.block_id },
                |m: &mut RowOrder| { &mut m.block_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "height",
                |m: &RowOrder| { &m.height },
                |m: &mut RowOrder| { &mut m.height },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RowOrder>(
                "RowOrder",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RowOrder {
        static instance: ::protobuf::rt::LazyV2<RowOrder> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RowOrder::new)
    }
}

impl ::protobuf::Clear for RowOrder {
    fn clear(&mut self) {
        self.row_id.clear();
        self.block_id.clear();
        self.height = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RowOrder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RowOrder {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Row {
    // message fields
    pub id: ::std::string::String,
    pub cell_by_field_id: ::std::collections::HashMap<::std::string::String, Cell>,
    pub height: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Row {
    fn default() -> &'a Row {
        <Row as ::protobuf::Message>::default_instance()
    }
}

impl Row {
    pub fn new() -> Row {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // repeated .Row.CellByFieldIdEntry cell_by_field_id = 2;


    pub fn get_cell_by_field_id(&self) -> &::std::collections::HashMap<::std::string::String, Cell> {
        &self.cell_by_field_id
    }
    pub fn clear_cell_by_field_id(&mut self) {
        self.cell_by_field_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_cell_by_field_id(&mut self, v: ::std::collections::HashMap<::std::string::String, Cell>) {
        self.cell_by_field_id = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cell_by_field_id(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, Cell> {
        &mut self.cell_by_field_id
    }

    // Take field
    pub fn take_cell_by_field_id(&mut self) -> ::std::collections::HashMap<::std::string::String, Cell> {
        ::std::mem::replace(&mut self.cell_by_field_id, ::std::collections::HashMap::new())
    }

    // int32 height = 3;


    pub fn get_height(&self) -> i32 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: i32) {
        self.height = v;
    }
}

impl ::protobuf::Message for Row {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Cell>>(wire_type, is, &mut self.cell_by_field_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.height = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Cell>>(2, &self.cell_by_field_id);
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(3, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Cell>>(2, &self.cell_by_field_id, os)?;
        if self.height != 0 {
            os.write_int32(3, self.height)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Row {
        Row::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Row| { &m.id },
                |m: &mut Row| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Cell>>(
                "cell_by_field_id",
                |m: &Row| { &m.cell_by_field_id },
                |m: &mut Row| { &mut m.cell_by_field_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "height",
                |m: &Row| { &m.height },
                |m: &mut Row| { &mut m.height },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Row>(
                "Row",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Row {
        static instance: ::protobuf::rt::LazyV2<Row> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Row::new)
    }
}

impl ::protobuf::Clear for Row {
    fn clear(&mut self) {
        self.id.clear();
        self.cell_by_field_id.clear();
        self.height = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Row {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Row {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RepeatedRow {
    // message fields
    pub items: ::protobuf::RepeatedField<Row>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RepeatedRow {
    fn default() -> &'a RepeatedRow {
        <RepeatedRow as ::protobuf::Message>::default_instance()
    }
}

impl RepeatedRow {
    pub fn new() -> RepeatedRow {
        ::std::default::Default::default()
    }

    // repeated .Row items = 1;


    pub fn get_items(&self) -> &[Row] {
        &self.items
    }
    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::protobuf::RepeatedField<Row>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::protobuf::RepeatedField<Row> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::protobuf::RepeatedField<Row> {
        ::std::mem::replace(&mut self.items, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RepeatedRow {
    fn is_initialized(&self) -> bool {
        for v in &self.items {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.items)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.items {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RepeatedRow {
        RepeatedRow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Row>>(
                "items",
                |m: &RepeatedRow| { &m.items },
                |m: &mut RepeatedRow| { &mut m.items },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RepeatedRow>(
                "RepeatedRow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RepeatedRow {
        static instance: ::protobuf::rt::LazyV2<RepeatedRow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RepeatedRow::new)
    }
}

impl ::protobuf::Clear for RepeatedRow {
    fn clear(&mut self) {
        self.items.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RepeatedRow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RepeatedRow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RepeatedGridBlock {
    // message fields
    pub items: ::protobuf::RepeatedField<GridBlock>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RepeatedGridBlock {
    fn default() -> &'a RepeatedGridBlock {
        <RepeatedGridBlock as ::protobuf::Message>::default_instance()
    }
}

impl RepeatedGridBlock {
    pub fn new() -> RepeatedGridBlock {
        ::std::default::Default::default()
    }

    // repeated .GridBlock items = 1;


    pub fn get_items(&self) -> &[GridBlock] {
        &self.items
    }
    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::protobuf::RepeatedField<GridBlock>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::protobuf::RepeatedField<GridBlock> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::protobuf::RepeatedField<GridBlock> {
        ::std::mem::replace(&mut self.items, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RepeatedGridBlock {
    fn is_initialized(&self) -> bool {
        for v in &self.items {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.items)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.items {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RepeatedGridBlock {
        RepeatedGridBlock::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GridBlock>>(
                "items",
                |m: &RepeatedGridBlock| { &m.items },
                |m: &mut RepeatedGridBlock| { &mut m.items },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RepeatedGridBlock>(
                "RepeatedGridBlock",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RepeatedGridBlock {
        static instance: ::protobuf::rt::LazyV2<RepeatedGridBlock> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RepeatedGridBlock::new)
    }
}

impl ::protobuf::Clear for RepeatedGridBlock {
    fn clear(&mut self) {
        self.items.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RepeatedGridBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RepeatedGridBlock {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GridBlockOrder {
    // message fields
    pub block_id: ::std::string::String,
    pub row_orders: ::protobuf::RepeatedField<RowOrder>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GridBlockOrder {
    fn default() -> &'a GridBlockOrder {
        <GridBlockOrder as ::protobuf::Message>::default_instance()
    }
}

impl GridBlockOrder {
    pub fn new() -> GridBlockOrder {
        ::std::default::Default::default()
    }

    // string block_id = 1;


    pub fn get_block_id(&self) -> &str {
        &self.block_id
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: ::std::string::String) {
        self.block_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut ::std::string::String {
        &mut self.block_id
    }

    // Take field
    pub fn take_block_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.block_id, ::std::string::String::new())
    }

    // repeated .RowOrder row_orders = 2;


    pub fn get_row_orders(&self) -> &[RowOrder] {
        &self.row_orders
    }
    pub fn clear_row_orders(&mut self) {
        self.row_orders.clear();
    }

    // Param is passed by value, moved
    pub fn set_row_orders(&mut self, v: ::protobuf::RepeatedField<RowOrder>) {
        self.row_orders = v;
    }

    // Mutable pointer to the field.
    pub fn mut_row_orders(&mut self) -> &mut ::protobuf::RepeatedField<RowOrder> {
        &mut self.row_orders
    }

    // Take field
    pub fn take_row_orders(&mut self) -> ::protobuf::RepeatedField<RowOrder> {
        ::std::mem::replace(&mut self.row_orders, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GridBlockOrder {
    fn is_initialized(&self) -> bool {
        for v in &self.row_orders {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.block_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.row_orders)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.block_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.block_id);
        }
        for value in &self.row_orders {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.block_id.is_empty() {
            os.write_string(1, &self.block_id)?;
        }
        for v in &self.row_orders {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GridBlockOrder {
        GridBlockOrder::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "block_id",
                |m: &GridBlockOrder| { &m.block_id },
                |m: &mut GridBlockOrder| { &mut m.block_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RowOrder>>(
                "row_orders",
                |m: &GridBlockOrder| { &m.row_orders },
                |m: &mut GridBlockOrder| { &mut m.row_orders },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GridBlockOrder>(
                "GridBlockOrder",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GridBlockOrder {
        static instance: ::protobuf::rt::LazyV2<GridBlockOrder> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GridBlockOrder::new)
    }
}

impl ::protobuf::Clear for GridBlockOrder {
    fn clear(&mut self) {
        self.block_id.clear();
        self.row_orders.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GridBlockOrder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GridBlockOrder {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IndexRowOrder {
    // message fields
    pub row_order: ::protobuf::SingularPtrField<RowOrder>,
    // message oneof groups
    pub one_of_index: ::std::option::Option<IndexRowOrder_oneof_one_of_index>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IndexRowOrder {
    fn default() -> &'a IndexRowOrder {
        <IndexRowOrder as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum IndexRowOrder_oneof_one_of_index {
    index(i32),
}

impl IndexRowOrder {
    pub fn new() -> IndexRowOrder {
        ::std::default::Default::default()
    }

    // .RowOrder row_order = 1;


    pub fn get_row_order(&self) -> &RowOrder {
        self.row_order.as_ref().unwrap_or_else(|| <RowOrder as ::protobuf::Message>::default_instance())
    }
    pub fn clear_row_order(&mut self) {
        self.row_order.clear();
    }

    pub fn has_row_order(&self) -> bool {
        self.row_order.is_some()
    }

    // Param is passed by value, moved
    pub fn set_row_order(&mut self, v: RowOrder) {
        self.row_order = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_row_order(&mut self) -> &mut RowOrder {
        if self.row_order.is_none() {
            self.row_order.set_default();
        }
        self.row_order.as_mut().unwrap()
    }

    // Take field
    pub fn take_row_order(&mut self) -> RowOrder {
        self.row_order.take().unwrap_or_else(|| RowOrder::new())
    }

    // int32 index = 2;


    pub fn get_index(&self) -> i32 {
        match self.one_of_index {
            ::std::option::Option::Some(IndexRowOrder_oneof_one_of_index::index(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_index(&mut self) {
        self.one_of_index = ::std::option::Option::None;
    }

    pub fn has_index(&self) -> bool {
        match self.one_of_index {
            ::std::option::Option::Some(IndexRowOrder_oneof_one_of_index::index(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: i32) {
        self.one_of_index = ::std::option::Option::Some(IndexRowOrder_oneof_one_of_index::index(v))
    }
}

impl ::protobuf::Message for IndexRowOrder {
    fn is_initialized(&self) -> bool {
        for v in &self.row_order {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.row_order)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_index = ::std::option::Option::Some(IndexRowOrder_oneof_one_of_index::index(is.read_int32()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.row_order.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_index {
            match v {
                &IndexRowOrder_oneof_one_of_index::index(v) => {
                    my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.row_order.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_index {
            match v {
                &IndexRowOrder_oneof_one_of_index::index(v) => {
                    os.write_int32(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IndexRowOrder {
        IndexRowOrder::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RowOrder>>(
                "row_order",
                |m: &IndexRowOrder| { &m.row_order },
                |m: &mut IndexRowOrder| { &mut m.row_order },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor::<_>(
                "index",
                IndexRowOrder::has_index,
                IndexRowOrder::get_index,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<IndexRowOrder>(
                "IndexRowOrder",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static IndexRowOrder {
        static instance: ::protobuf::rt::LazyV2<IndexRowOrder> = ::protobuf::rt::LazyV2::INIT;
        instance.get(IndexRowOrder::new)
    }
}

impl ::protobuf::Clear for IndexRowOrder {
    fn clear(&mut self) {
        self.row_order.clear();
        self.one_of_index = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IndexRowOrder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IndexRowOrder {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdatedRowOrder {
    // message fields
    pub row_order: ::protobuf::SingularPtrField<RowOrder>,
    pub row: ::protobuf::SingularPtrField<Row>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdatedRowOrder {
    fn default() -> &'a UpdatedRowOrder {
        <UpdatedRowOrder as ::protobuf::Message>::default_instance()
    }
}

impl UpdatedRowOrder {
    pub fn new() -> UpdatedRowOrder {
        ::std::default::Default::default()
    }

    // .RowOrder row_order = 1;


    pub fn get_row_order(&self) -> &RowOrder {
        self.row_order.as_ref().unwrap_or_else(|| <RowOrder as ::protobuf::Message>::default_instance())
    }
    pub fn clear_row_order(&mut self) {
        self.row_order.clear();
    }

    pub fn has_row_order(&self) -> bool {
        self.row_order.is_some()
    }

    // Param is passed by value, moved
    pub fn set_row_order(&mut self, v: RowOrder) {
        self.row_order = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_row_order(&mut self) -> &mut RowOrder {
        if self.row_order.is_none() {
            self.row_order.set_default();
        }
        self.row_order.as_mut().unwrap()
    }

    // Take field
    pub fn take_row_order(&mut self) -> RowOrder {
        self.row_order.take().unwrap_or_else(|| RowOrder::new())
    }

    // .Row row = 2;


    pub fn get_row(&self) -> &Row {
        self.row.as_ref().unwrap_or_else(|| <Row as ::protobuf::Message>::default_instance())
    }
    pub fn clear_row(&mut self) {
        self.row.clear();
    }

    pub fn has_row(&self) -> bool {
        self.row.is_some()
    }

    // Param is passed by value, moved
    pub fn set_row(&mut self, v: Row) {
        self.row = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_row(&mut self) -> &mut Row {
        if self.row.is_none() {
            self.row.set_default();
        }
        self.row.as_mut().unwrap()
    }

    // Take field
    pub fn take_row(&mut self) -> Row {
        self.row.take().unwrap_or_else(|| Row::new())
    }
}

impl ::protobuf::Message for UpdatedRowOrder {
    fn is_initialized(&self) -> bool {
        for v in &self.row_order {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.row {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.row_order)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.row)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.row_order.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.row.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.row_order.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.row.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdatedRowOrder {
        UpdatedRowOrder::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RowOrder>>(
                "row_order",
                |m: &UpdatedRowOrder| { &m.row_order },
                |m: &mut UpdatedRowOrder| { &mut m.row_order },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Row>>(
                "row",
                |m: &UpdatedRowOrder| { &m.row },
                |m: &mut UpdatedRowOrder| { &mut m.row },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdatedRowOrder>(
                "UpdatedRowOrder",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdatedRowOrder {
        static instance: ::protobuf::rt::LazyV2<UpdatedRowOrder> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdatedRowOrder::new)
    }
}

impl ::protobuf::Clear for UpdatedRowOrder {
    fn clear(&mut self) {
        self.row_order.clear();
        self.row.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdatedRowOrder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdatedRowOrder {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GridRowsChangeset {
    // message fields
    pub block_id: ::std::string::String,
    pub inserted_rows: ::protobuf::RepeatedField<IndexRowOrder>,
    pub deleted_rows: ::protobuf::RepeatedField<RowOrder>,
    pub updated_rows: ::protobuf::RepeatedField<UpdatedRowOrder>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GridRowsChangeset {
    fn default() -> &'a GridRowsChangeset {
        <GridRowsChangeset as ::protobuf::Message>::default_instance()
    }
}

impl GridRowsChangeset {
    pub fn new() -> GridRowsChangeset {
        ::std::default::Default::default()
    }

    // string block_id = 1;


    pub fn get_block_id(&self) -> &str {
        &self.block_id
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: ::std::string::String) {
        self.block_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut ::std::string::String {
        &mut self.block_id
    }

    // Take field
    pub fn take_block_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.block_id, ::std::string::String::new())
    }

    // repeated .IndexRowOrder inserted_rows = 2;


    pub fn get_inserted_rows(&self) -> &[IndexRowOrder] {
        &self.inserted_rows
    }
    pub fn clear_inserted_rows(&mut self) {
        self.inserted_rows.clear();
    }

    // Param is passed by value, moved
    pub fn set_inserted_rows(&mut self, v: ::protobuf::RepeatedField<IndexRowOrder>) {
        self.inserted_rows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_inserted_rows(&mut self) -> &mut ::protobuf::RepeatedField<IndexRowOrder> {
        &mut self.inserted_rows
    }

    // Take field
    pub fn take_inserted_rows(&mut self) -> ::protobuf::RepeatedField<IndexRowOrder> {
        ::std::mem::replace(&mut self.inserted_rows, ::protobuf::RepeatedField::new())
    }

    // repeated .RowOrder deleted_rows = 3;


    pub fn get_deleted_rows(&self) -> &[RowOrder] {
        &self.deleted_rows
    }
    pub fn clear_deleted_rows(&mut self) {
        self.deleted_rows.clear();
    }

    // Param is passed by value, moved
    pub fn set_deleted_rows(&mut self, v: ::protobuf::RepeatedField<RowOrder>) {
        self.deleted_rows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_deleted_rows(&mut self) -> &mut ::protobuf::RepeatedField<RowOrder> {
        &mut self.deleted_rows
    }

    // Take field
    pub fn take_deleted_rows(&mut self) -> ::protobuf::RepeatedField<RowOrder> {
        ::std::mem::replace(&mut self.deleted_rows, ::protobuf::RepeatedField::new())
    }

    // repeated .UpdatedRowOrder updated_rows = 4;


    pub fn get_updated_rows(&self) -> &[UpdatedRowOrder] {
        &self.updated_rows
    }
    pub fn clear_updated_rows(&mut self) {
        self.updated_rows.clear();
    }

    // Param is passed by value, moved
    pub fn set_updated_rows(&mut self, v: ::protobuf::RepeatedField<UpdatedRowOrder>) {
        self.updated_rows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_updated_rows(&mut self) -> &mut ::protobuf::RepeatedField<UpdatedRowOrder> {
        &mut self.updated_rows
    }

    // Take field
    pub fn take_updated_rows(&mut self) -> ::protobuf::RepeatedField<UpdatedRowOrder> {
        ::std::mem::replace(&mut self.updated_rows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GridRowsChangeset {
    fn is_initialized(&self) -> bool {
        for v in &self.inserted_rows {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.deleted_rows {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updated_rows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.block_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.inserted_rows)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.deleted_rows)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.updated_rows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.block_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.block_id);
        }
        for value in &self.inserted_rows {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.deleted_rows {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.updated_rows {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.block_id.is_empty() {
            os.write_string(1, &self.block_id)?;
        }
        for v in &self.inserted_rows {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.deleted_rows {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.updated_rows {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GridRowsChangeset {
        GridRowsChangeset::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "block_id",
                |m: &GridRowsChangeset| { &m.block_id },
                |m: &mut GridRowsChangeset| { &mut m.block_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<IndexRowOrder>>(
                "inserted_rows",
                |m: &GridRowsChangeset| { &m.inserted_rows },
                |m: &mut GridRowsChangeset| { &mut m.inserted_rows },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RowOrder>>(
                "deleted_rows",
                |m: &GridRowsChangeset| { &m.deleted_rows },
                |m: &mut GridRowsChangeset| { &mut m.deleted_rows },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<UpdatedRowOrder>>(
                "updated_rows",
                |m: &GridRowsChangeset| { &m.updated_rows },
                |m: &mut GridRowsChangeset| { &mut m.updated_rows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GridRowsChangeset>(
                "GridRowsChangeset",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GridRowsChangeset {
        static instance: ::protobuf::rt::LazyV2<GridRowsChangeset> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GridRowsChangeset::new)
    }
}

impl ::protobuf::Clear for GridRowsChangeset {
    fn clear(&mut self) {
        self.block_id.clear();
        self.inserted_rows.clear();
        self.deleted_rows.clear();
        self.updated_rows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GridRowsChangeset {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GridRowsChangeset {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GridBlock {
    // message fields
    pub id: ::std::string::String,
    pub row_orders: ::protobuf::RepeatedField<RowOrder>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GridBlock {
    fn default() -> &'a GridBlock {
        <GridBlock as ::protobuf::Message>::default_instance()
    }
}

impl GridBlock {
    pub fn new() -> GridBlock {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // repeated .RowOrder row_orders = 2;


    pub fn get_row_orders(&self) -> &[RowOrder] {
        &self.row_orders
    }
    pub fn clear_row_orders(&mut self) {
        self.row_orders.clear();
    }

    // Param is passed by value, moved
    pub fn set_row_orders(&mut self, v: ::protobuf::RepeatedField<RowOrder>) {
        self.row_orders = v;
    }

    // Mutable pointer to the field.
    pub fn mut_row_orders(&mut self) -> &mut ::protobuf::RepeatedField<RowOrder> {
        &mut self.row_orders
    }

    // Take field
    pub fn take_row_orders(&mut self) -> ::protobuf::RepeatedField<RowOrder> {
        ::std::mem::replace(&mut self.row_orders, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GridBlock {
    fn is_initialized(&self) -> bool {
        for v in &self.row_orders {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.row_orders)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        for value in &self.row_orders {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        for v in &self.row_orders {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GridBlock {
        GridBlock::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &GridBlock| { &m.id },
                |m: &mut GridBlock| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RowOrder>>(
                "row_orders",
                |m: &GridBlock| { &m.row_orders },
                |m: &mut GridBlock| { &mut m.row_orders },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GridBlock>(
                "GridBlock",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GridBlock {
        static instance: ::protobuf::rt::LazyV2<GridBlock> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GridBlock::new)
    }
}

impl ::protobuf::Clear for GridBlock {
    fn clear(&mut self) {
        self.id.clear();
        self.row_orders.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GridBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GridBlock {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Cell {
    // message fields
    pub field_id: ::std::string::String,
    pub content: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cell {
    fn default() -> &'a Cell {
        <Cell as ::protobuf::Message>::default_instance()
    }
}

impl Cell {
    pub fn new() -> Cell {
        ::std::default::Default::default()
    }

    // string field_id = 1;


    pub fn get_field_id(&self) -> &str {
        &self.field_id
    }
    pub fn clear_field_id(&mut self) {
        self.field_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_id(&mut self, v: ::std::string::String) {
        self.field_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_id(&mut self) -> &mut ::std::string::String {
        &mut self.field_id
    }

    // Take field
    pub fn take_field_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_id, ::std::string::String::new())
    }

    // string content = 2;


    pub fn get_content(&self) -> &str {
        &self.content
    }
    pub fn clear_content(&mut self) {
        self.content.clear();
    }

    // Param is passed by value, moved
    pub fn set_content(&mut self, v: ::std::string::String) {
        self.content = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content(&mut self) -> &mut ::std::string::String {
        &mut self.content
    }

    // Take field
    pub fn take_content(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.content, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Cell {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.content)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_id);
        }
        if !self.content.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.content);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.field_id.is_empty() {
            os.write_string(1, &self.field_id)?;
        }
        if !self.content.is_empty() {
            os.write_string(2, &self.content)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cell {
        Cell::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "field_id",
                |m: &Cell| { &m.field_id },
                |m: &mut Cell| { &mut m.field_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "content",
                |m: &Cell| { &m.content },
                |m: &mut Cell| { &mut m.content },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cell>(
                "Cell",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cell {
        static instance: ::protobuf::rt::LazyV2<Cell> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cell::new)
    }
}

impl ::protobuf::Clear for Cell {
    fn clear(&mut self) {
        self.field_id.clear();
        self.content.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cell {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cell {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RepeatedCell {
    // message fields
    pub items: ::protobuf::RepeatedField<Cell>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RepeatedCell {
    fn default() -> &'a RepeatedCell {
        <RepeatedCell as ::protobuf::Message>::default_instance()
    }
}

impl RepeatedCell {
    pub fn new() -> RepeatedCell {
        ::std::default::Default::default()
    }

    // repeated .Cell items = 1;


    pub fn get_items(&self) -> &[Cell] {
        &self.items
    }
    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::protobuf::RepeatedField<Cell>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::protobuf::RepeatedField<Cell> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::protobuf::RepeatedField<Cell> {
        ::std::mem::replace(&mut self.items, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RepeatedCell {
    fn is_initialized(&self) -> bool {
        for v in &self.items {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.items)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.items {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RepeatedCell {
        RepeatedCell::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cell>>(
                "items",
                |m: &RepeatedCell| { &m.items },
                |m: &mut RepeatedCell| { &mut m.items },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RepeatedCell>(
                "RepeatedCell",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RepeatedCell {
        static instance: ::protobuf::rt::LazyV2<RepeatedCell> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RepeatedCell::new)
    }
}

impl ::protobuf::Clear for RepeatedCell {
    fn clear(&mut self) {
        self.items.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RepeatedCell {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RepeatedCell {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateGridPayload {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateGridPayload {
    fn default() -> &'a CreateGridPayload {
        <CreateGridPayload as ::protobuf::Message>::default_instance()
    }
}

impl CreateGridPayload {
    pub fn new() -> CreateGridPayload {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CreateGridPayload {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateGridPayload {
        CreateGridPayload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &CreateGridPayload| { &m.name },
                |m: &mut CreateGridPayload| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateGridPayload>(
                "CreateGridPayload",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateGridPayload {
        static instance: ::protobuf::rt::LazyV2<CreateGridPayload> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateGridPayload::new)
    }
}

impl ::protobuf::Clear for CreateGridPayload {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateGridPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateGridPayload {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GridId {
    // message fields
    pub value: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GridId {
    fn default() -> &'a GridId {
        <GridId as ::protobuf::Message>::default_instance()
    }
}

impl GridId {
    pub fn new() -> GridId {
        ::std::default::Default::default()
    }

    // string value = 1;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GridId {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.value.is_empty() {
            os.write_string(1, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GridId {
        GridId::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &GridId| { &m.value },
                |m: &mut GridId| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GridId>(
                "GridId",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GridId {
        static instance: ::protobuf::rt::LazyV2<GridId> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GridId::new)
    }
}

impl ::protobuf::Clear for GridId {
    fn clear(&mut self) {
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GridId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GridId {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GridBlockId {
    // message fields
    pub value: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GridBlockId {
    fn default() -> &'a GridBlockId {
        <GridBlockId as ::protobuf::Message>::default_instance()
    }
}

impl GridBlockId {
    pub fn new() -> GridBlockId {
        ::std::default::Default::default()
    }

    // string value = 1;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GridBlockId {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.value.is_empty() {
            os.write_string(1, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GridBlockId {
        GridBlockId::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &GridBlockId| { &m.value },
                |m: &mut GridBlockId| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GridBlockId>(
                "GridBlockId",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GridBlockId {
        static instance: ::protobuf::rt::LazyV2<GridBlockId> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GridBlockId::new)
    }
}

impl ::protobuf::Clear for GridBlockId {
    fn clear(&mut self) {
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GridBlockId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GridBlockId {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateRowPayload {
    // message fields
    pub grid_id: ::std::string::String,
    // message oneof groups
    pub one_of_start_row_id: ::std::option::Option<CreateRowPayload_oneof_one_of_start_row_id>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateRowPayload {
    fn default() -> &'a CreateRowPayload {
        <CreateRowPayload as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum CreateRowPayload_oneof_one_of_start_row_id {
    start_row_id(::std::string::String),
}

impl CreateRowPayload {
    pub fn new() -> CreateRowPayload {
        ::std::default::Default::default()
    }

    // string grid_id = 1;


    pub fn get_grid_id(&self) -> &str {
        &self.grid_id
    }
    pub fn clear_grid_id(&mut self) {
        self.grid_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_grid_id(&mut self, v: ::std::string::String) {
        self.grid_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_grid_id(&mut self) -> &mut ::std::string::String {
        &mut self.grid_id
    }

    // Take field
    pub fn take_grid_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.grid_id, ::std::string::String::new())
    }

    // string start_row_id = 2;


    pub fn get_start_row_id(&self) -> &str {
        match self.one_of_start_row_id {
            ::std::option::Option::Some(CreateRowPayload_oneof_one_of_start_row_id::start_row_id(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_start_row_id(&mut self) {
        self.one_of_start_row_id = ::std::option::Option::None;
    }

    pub fn has_start_row_id(&self) -> bool {
        match self.one_of_start_row_id {
            ::std::option::Option::Some(CreateRowPayload_oneof_one_of_start_row_id::start_row_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_start_row_id(&mut self, v: ::std::string::String) {
        self.one_of_start_row_id = ::std::option::Option::Some(CreateRowPayload_oneof_one_of_start_row_id::start_row_id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_start_row_id(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(CreateRowPayload_oneof_one_of_start_row_id::start_row_id(_)) = self.one_of_start_row_id {
        } else {
            self.one_of_start_row_id = ::std::option::Option::Some(CreateRowPayload_oneof_one_of_start_row_id::start_row_id(::std::string::String::new()));
        }
        match self.one_of_start_row_id {
            ::std::option::Option::Some(CreateRowPayload_oneof_one_of_start_row_id::start_row_id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_start_row_id(&mut self) -> ::std::string::String {
        if self.has_start_row_id() {
            match self.one_of_start_row_id.take() {
                ::std::option::Option::Some(CreateRowPayload_oneof_one_of_start_row_id::start_row_id(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for CreateRowPayload {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.grid_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_start_row_id = ::std::option::Option::Some(CreateRowPayload_oneof_one_of_start_row_id::start_row_id(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.grid_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.grid_id);
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_start_row_id {
            match v {
                &CreateRowPayload_oneof_one_of_start_row_id::start_row_id(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.grid_id.is_empty() {
            os.write_string(1, &self.grid_id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_start_row_id {
            match v {
                &CreateRowPayload_oneof_one_of_start_row_id::start_row_id(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateRowPayload {
        CreateRowPayload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "grid_id",
                |m: &CreateRowPayload| { &m.grid_id },
                |m: &mut CreateRowPayload| { &mut m.grid_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "start_row_id",
                CreateRowPayload::has_start_row_id,
                CreateRowPayload::get_start_row_id,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateRowPayload>(
                "CreateRowPayload",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateRowPayload {
        static instance: ::protobuf::rt::LazyV2<CreateRowPayload> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateRowPayload::new)
    }
}

impl ::protobuf::Clear for CreateRowPayload {
    fn clear(&mut self) {
        self.grid_id.clear();
        self.one_of_start_row_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateRowPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateRowPayload {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InsertFieldPayload {
    // message fields
    pub grid_id: ::std::string::String,
    pub field: ::protobuf::SingularPtrField<Field>,
    pub type_option_data: ::std::vec::Vec<u8>,
    // message oneof groups
    pub one_of_start_field_id: ::std::option::Option<InsertFieldPayload_oneof_one_of_start_field_id>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InsertFieldPayload {
    fn default() -> &'a InsertFieldPayload {
        <InsertFieldPayload as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum InsertFieldPayload_oneof_one_of_start_field_id {
    start_field_id(::std::string::String),
}

impl InsertFieldPayload {
    pub fn new() -> InsertFieldPayload {
        ::std::default::Default::default()
    }

    // string grid_id = 1;


    pub fn get_grid_id(&self) -> &str {
        &self.grid_id
    }
    pub fn clear_grid_id(&mut self) {
        self.grid_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_grid_id(&mut self, v: ::std::string::String) {
        self.grid_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_grid_id(&mut self) -> &mut ::std::string::String {
        &mut self.grid_id
    }

    // Take field
    pub fn take_grid_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.grid_id, ::std::string::String::new())
    }

    // .Field field = 2;


    pub fn get_field(&self) -> &Field {
        self.field.as_ref().unwrap_or_else(|| <Field as ::protobuf::Message>::default_instance())
    }
    pub fn clear_field(&mut self) {
        self.field.clear();
    }

    pub fn has_field(&self) -> bool {
        self.field.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field(&mut self, v: Field) {
        self.field = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field(&mut self) -> &mut Field {
        if self.field.is_none() {
            self.field.set_default();
        }
        self.field.as_mut().unwrap()
    }

    // Take field
    pub fn take_field(&mut self) -> Field {
        self.field.take().unwrap_or_else(|| Field::new())
    }

    // bytes type_option_data = 3;


    pub fn get_type_option_data(&self) -> &[u8] {
        &self.type_option_data
    }
    pub fn clear_type_option_data(&mut self) {
        self.type_option_data.clear();
    }

    // Param is passed by value, moved
    pub fn set_type_option_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.type_option_data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type_option_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.type_option_data
    }

    // Take field
    pub fn take_type_option_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.type_option_data, ::std::vec::Vec::new())
    }

    // string start_field_id = 4;


    pub fn get_start_field_id(&self) -> &str {
        match self.one_of_start_field_id {
            ::std::option::Option::Some(InsertFieldPayload_oneof_one_of_start_field_id::start_field_id(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_start_field_id(&mut self) {
        self.one_of_start_field_id = ::std::option::Option::None;
    }

    pub fn has_start_field_id(&self) -> bool {
        match self.one_of_start_field_id {
            ::std::option::Option::Some(InsertFieldPayload_oneof_one_of_start_field_id::start_field_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_start_field_id(&mut self, v: ::std::string::String) {
        self.one_of_start_field_id = ::std::option::Option::Some(InsertFieldPayload_oneof_one_of_start_field_id::start_field_id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_start_field_id(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(InsertFieldPayload_oneof_one_of_start_field_id::start_field_id(_)) = self.one_of_start_field_id {
        } else {
            self.one_of_start_field_id = ::std::option::Option::Some(InsertFieldPayload_oneof_one_of_start_field_id::start_field_id(::std::string::String::new()));
        }
        match self.one_of_start_field_id {
            ::std::option::Option::Some(InsertFieldPayload_oneof_one_of_start_field_id::start_field_id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_start_field_id(&mut self) -> ::std::string::String {
        if self.has_start_field_id() {
            match self.one_of_start_field_id.take() {
                ::std::option::Option::Some(InsertFieldPayload_oneof_one_of_start_field_id::start_field_id(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for InsertFieldPayload {
    fn is_initialized(&self) -> bool {
        for v in &self.field {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.grid_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.field)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.type_option_data)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_start_field_id = ::std::option::Option::Some(InsertFieldPayload_oneof_one_of_start_field_id::start_field_id(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.grid_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.grid_id);
        }
        if let Some(ref v) = self.field.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.type_option_data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.type_option_data);
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_start_field_id {
            match v {
                &InsertFieldPayload_oneof_one_of_start_field_id::start_field_id(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.grid_id.is_empty() {
            os.write_string(1, &self.grid_id)?;
        }
        if let Some(ref v) = self.field.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.type_option_data.is_empty() {
            os.write_bytes(3, &self.type_option_data)?;
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_start_field_id {
            match v {
                &InsertFieldPayload_oneof_one_of_start_field_id::start_field_id(ref v) => {
                    os.write_string(4, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InsertFieldPayload {
        InsertFieldPayload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "grid_id",
                |m: &InsertFieldPayload| { &m.grid_id },
                |m: &mut InsertFieldPayload| { &mut m.grid_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Field>>(
                "field",
                |m: &InsertFieldPayload| { &m.field },
                |m: &mut InsertFieldPayload| { &mut m.field },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "type_option_data",
                |m: &InsertFieldPayload| { &m.type_option_data },
                |m: &mut InsertFieldPayload| { &mut m.type_option_data },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "start_field_id",
                InsertFieldPayload::has_start_field_id,
                InsertFieldPayload::get_start_field_id,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<InsertFieldPayload>(
                "InsertFieldPayload",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static InsertFieldPayload {
        static instance: ::protobuf::rt::LazyV2<InsertFieldPayload> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InsertFieldPayload::new)
    }
}

impl ::protobuf::Clear for InsertFieldPayload {
    fn clear(&mut self) {
        self.grid_id.clear();
        self.field.clear();
        self.type_option_data.clear();
        self.one_of_start_field_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InsertFieldPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InsertFieldPayload {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryFieldPayload {
    // message fields
    pub grid_id: ::std::string::String,
    pub field_orders: ::protobuf::SingularPtrField<RepeatedFieldOrder>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryFieldPayload {
    fn default() -> &'a QueryFieldPayload {
        <QueryFieldPayload as ::protobuf::Message>::default_instance()
    }
}

impl QueryFieldPayload {
    pub fn new() -> QueryFieldPayload {
        ::std::default::Default::default()
    }

    // string grid_id = 1;


    pub fn get_grid_id(&self) -> &str {
        &self.grid_id
    }
    pub fn clear_grid_id(&mut self) {
        self.grid_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_grid_id(&mut self, v: ::std::string::String) {
        self.grid_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_grid_id(&mut self) -> &mut ::std::string::String {
        &mut self.grid_id
    }

    // Take field
    pub fn take_grid_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.grid_id, ::std::string::String::new())
    }

    // .RepeatedFieldOrder field_orders = 2;


    pub fn get_field_orders(&self) -> &RepeatedFieldOrder {
        self.field_orders.as_ref().unwrap_or_else(|| <RepeatedFieldOrder as ::protobuf::Message>::default_instance())
    }
    pub fn clear_field_orders(&mut self) {
        self.field_orders.clear();
    }

    pub fn has_field_orders(&self) -> bool {
        self.field_orders.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_orders(&mut self, v: RepeatedFieldOrder) {
        self.field_orders = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_orders(&mut self) -> &mut RepeatedFieldOrder {
        if self.field_orders.is_none() {
            self.field_orders.set_default();
        }
        self.field_orders.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_orders(&mut self) -> RepeatedFieldOrder {
        self.field_orders.take().unwrap_or_else(|| RepeatedFieldOrder::new())
    }
}

impl ::protobuf::Message for QueryFieldPayload {
    fn is_initialized(&self) -> bool {
        for v in &self.field_orders {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.grid_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.field_orders)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.grid_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.grid_id);
        }
        if let Some(ref v) = self.field_orders.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.grid_id.is_empty() {
            os.write_string(1, &self.grid_id)?;
        }
        if let Some(ref v) = self.field_orders.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryFieldPayload {
        QueryFieldPayload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "grid_id",
                |m: &QueryFieldPayload| { &m.grid_id },
                |m: &mut QueryFieldPayload| { &mut m.grid_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RepeatedFieldOrder>>(
                "field_orders",
                |m: &QueryFieldPayload| { &m.field_orders },
                |m: &mut QueryFieldPayload| { &mut m.field_orders },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryFieldPayload>(
                "QueryFieldPayload",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryFieldPayload {
        static instance: ::protobuf::rt::LazyV2<QueryFieldPayload> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryFieldPayload::new)
    }
}

impl ::protobuf::Clear for QueryFieldPayload {
    fn clear(&mut self) {
        self.grid_id.clear();
        self.field_orders.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryFieldPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryFieldPayload {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryGridBlocksPayload {
    // message fields
    pub grid_id: ::std::string::String,
    pub block_orders: ::protobuf::RepeatedField<GridBlockOrder>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryGridBlocksPayload {
    fn default() -> &'a QueryGridBlocksPayload {
        <QueryGridBlocksPayload as ::protobuf::Message>::default_instance()
    }
}

impl QueryGridBlocksPayload {
    pub fn new() -> QueryGridBlocksPayload {
        ::std::default::Default::default()
    }

    // string grid_id = 1;


    pub fn get_grid_id(&self) -> &str {
        &self.grid_id
    }
    pub fn clear_grid_id(&mut self) {
        self.grid_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_grid_id(&mut self, v: ::std::string::String) {
        self.grid_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_grid_id(&mut self) -> &mut ::std::string::String {
        &mut self.grid_id
    }

    // Take field
    pub fn take_grid_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.grid_id, ::std::string::String::new())
    }

    // repeated .GridBlockOrder block_orders = 2;


    pub fn get_block_orders(&self) -> &[GridBlockOrder] {
        &self.block_orders
    }
    pub fn clear_block_orders(&mut self) {
        self.block_orders.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_orders(&mut self, v: ::protobuf::RepeatedField<GridBlockOrder>) {
        self.block_orders = v;
    }

    // Mutable pointer to the field.
    pub fn mut_block_orders(&mut self) -> &mut ::protobuf::RepeatedField<GridBlockOrder> {
        &mut self.block_orders
    }

    // Take field
    pub fn take_block_orders(&mut self) -> ::protobuf::RepeatedField<GridBlockOrder> {
        ::std::mem::replace(&mut self.block_orders, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for QueryGridBlocksPayload {
    fn is_initialized(&self) -> bool {
        for v in &self.block_orders {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.grid_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.block_orders)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.grid_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.grid_id);
        }
        for value in &self.block_orders {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.grid_id.is_empty() {
            os.write_string(1, &self.grid_id)?;
        }
        for v in &self.block_orders {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryGridBlocksPayload {
        QueryGridBlocksPayload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "grid_id",
                |m: &QueryGridBlocksPayload| { &m.grid_id },
                |m: &mut QueryGridBlocksPayload| { &mut m.grid_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GridBlockOrder>>(
                "block_orders",
                |m: &QueryGridBlocksPayload| { &m.block_orders },
                |m: &mut QueryGridBlocksPayload| { &mut m.block_orders },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryGridBlocksPayload>(
                "QueryGridBlocksPayload",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryGridBlocksPayload {
        static instance: ::protobuf::rt::LazyV2<QueryGridBlocksPayload> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryGridBlocksPayload::new)
    }
}

impl ::protobuf::Clear for QueryGridBlocksPayload {
    fn clear(&mut self) {
        self.grid_id.clear();
        self.block_orders.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryGridBlocksPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryGridBlocksPayload {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FieldChangesetPayload {
    // message fields
    pub field_id: ::std::string::String,
    pub grid_id: ::std::string::String,
    // message oneof groups
    pub one_of_name: ::std::option::Option<FieldChangesetPayload_oneof_one_of_name>,
    pub one_of_desc: ::std::option::Option<FieldChangesetPayload_oneof_one_of_desc>,
    pub one_of_field_type: ::std::option::Option<FieldChangesetPayload_oneof_one_of_field_type>,
    pub one_of_frozen: ::std::option::Option<FieldChangesetPayload_oneof_one_of_frozen>,
    pub one_of_visibility: ::std::option::Option<FieldChangesetPayload_oneof_one_of_visibility>,
    pub one_of_width: ::std::option::Option<FieldChangesetPayload_oneof_one_of_width>,
    pub one_of_type_option_data: ::std::option::Option<FieldChangesetPayload_oneof_one_of_type_option_data>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FieldChangesetPayload {
    fn default() -> &'a FieldChangesetPayload {
        <FieldChangesetPayload as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum FieldChangesetPayload_oneof_one_of_name {
    name(::std::string::String),
}

#[derive(Clone,PartialEq,Debug)]
pub enum FieldChangesetPayload_oneof_one_of_desc {
    desc(::std::string::String),
}

#[derive(Clone,PartialEq,Debug)]
pub enum FieldChangesetPayload_oneof_one_of_field_type {
    field_type(FieldType),
}

#[derive(Clone,PartialEq,Debug)]
pub enum FieldChangesetPayload_oneof_one_of_frozen {
    frozen(bool),
}

#[derive(Clone,PartialEq,Debug)]
pub enum FieldChangesetPayload_oneof_one_of_visibility {
    visibility(bool),
}

#[derive(Clone,PartialEq,Debug)]
pub enum FieldChangesetPayload_oneof_one_of_width {
    width(i32),
}

#[derive(Clone,PartialEq,Debug)]
pub enum FieldChangesetPayload_oneof_one_of_type_option_data {
    type_option_data(::std::vec::Vec<u8>),
}

impl FieldChangesetPayload {
    pub fn new() -> FieldChangesetPayload {
        ::std::default::Default::default()
    }

    // string field_id = 1;


    pub fn get_field_id(&self) -> &str {
        &self.field_id
    }
    pub fn clear_field_id(&mut self) {
        self.field_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_id(&mut self, v: ::std::string::String) {
        self.field_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_id(&mut self) -> &mut ::std::string::String {
        &mut self.field_id
    }

    // Take field
    pub fn take_field_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_id, ::std::string::String::new())
    }

    // string grid_id = 2;


    pub fn get_grid_id(&self) -> &str {
        &self.grid_id
    }
    pub fn clear_grid_id(&mut self) {
        self.grid_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_grid_id(&mut self, v: ::std::string::String) {
        self.grid_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_grid_id(&mut self) -> &mut ::std::string::String {
        &mut self.grid_id
    }

    // Take field
    pub fn take_grid_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.grid_id, ::std::string::String::new())
    }

    // string name = 3;


    pub fn get_name(&self) -> &str {
        match self.one_of_name {
            ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_name::name(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_name(&mut self) {
        self.one_of_name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        match self.one_of_name {
            ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_name::name(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.one_of_name = ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_name::name(v))
    }

    // Mutable pointer to the field.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_name::name(_)) = self.one_of_name {
        } else {
            self.one_of_name = ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_name::name(::std::string::String::new()));
        }
        match self.one_of_name {
            ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_name::name(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        if self.has_name() {
            match self.one_of_name.take() {
                ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_name::name(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string desc = 4;


    pub fn get_desc(&self) -> &str {
        match self.one_of_desc {
            ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_desc::desc(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_desc(&mut self) {
        self.one_of_desc = ::std::option::Option::None;
    }

    pub fn has_desc(&self) -> bool {
        match self.one_of_desc {
            ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_desc::desc(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_desc(&mut self, v: ::std::string::String) {
        self.one_of_desc = ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_desc::desc(v))
    }

    // Mutable pointer to the field.
    pub fn mut_desc(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_desc::desc(_)) = self.one_of_desc {
        } else {
            self.one_of_desc = ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_desc::desc(::std::string::String::new()));
        }
        match self.one_of_desc {
            ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_desc::desc(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_desc(&mut self) -> ::std::string::String {
        if self.has_desc() {
            match self.one_of_desc.take() {
                ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_desc::desc(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .FieldType field_type = 5;


    pub fn get_field_type(&self) -> FieldType {
        match self.one_of_field_type {
            ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_field_type::field_type(v)) => v,
            _ => FieldType::RichText,
        }
    }
    pub fn clear_field_type(&mut self) {
        self.one_of_field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        match self.one_of_field_type {
            ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_field_type::field_type(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: FieldType) {
        self.one_of_field_type = ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_field_type::field_type(v))
    }

    // bool frozen = 6;


    pub fn get_frozen(&self) -> bool {
        match self.one_of_frozen {
            ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_frozen::frozen(v)) => v,
            _ => false,
        }
    }
    pub fn clear_frozen(&mut self) {
        self.one_of_frozen = ::std::option::Option::None;
    }

    pub fn has_frozen(&self) -> bool {
        match self.one_of_frozen {
            ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_frozen::frozen(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_frozen(&mut self, v: bool) {
        self.one_of_frozen = ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_frozen::frozen(v))
    }

    // bool visibility = 7;


    pub fn get_visibility(&self) -> bool {
        match self.one_of_visibility {
            ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_visibility::visibility(v)) => v,
            _ => false,
        }
    }
    pub fn clear_visibility(&mut self) {
        self.one_of_visibility = ::std::option::Option::None;
    }

    pub fn has_visibility(&self) -> bool {
        match self.one_of_visibility {
            ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_visibility::visibility(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_visibility(&mut self, v: bool) {
        self.one_of_visibility = ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_visibility::visibility(v))
    }

    // int32 width = 8;


    pub fn get_width(&self) -> i32 {
        match self.one_of_width {
            ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_width::width(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_width(&mut self) {
        self.one_of_width = ::std::option::Option::None;
    }

    pub fn has_width(&self) -> bool {
        match self.one_of_width {
            ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_width::width(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_width(&mut self, v: i32) {
        self.one_of_width = ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_width::width(v))
    }

    // bytes type_option_data = 9;


    pub fn get_type_option_data(&self) -> &[u8] {
        match self.one_of_type_option_data {
            ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_type_option_data::type_option_data(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_type_option_data(&mut self) {
        self.one_of_type_option_data = ::std::option::Option::None;
    }

    pub fn has_type_option_data(&self) -> bool {
        match self.one_of_type_option_data {
            ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_type_option_data::type_option_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_type_option_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.one_of_type_option_data = ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_type_option_data::type_option_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_type_option_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_type_option_data::type_option_data(_)) = self.one_of_type_option_data {
        } else {
            self.one_of_type_option_data = ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_type_option_data::type_option_data(::std::vec::Vec::new()));
        }
        match self.one_of_type_option_data {
            ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_type_option_data::type_option_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_type_option_data(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_type_option_data() {
            match self.one_of_type_option_data.take() {
                ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_type_option_data::type_option_data(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }
}

impl ::protobuf::Message for FieldChangesetPayload {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.grid_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_name = ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_name::name(is.read_string()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_desc = ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_desc::desc(is.read_string()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_field_type = ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_field_type::field_type(is.read_enum()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_frozen = ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_frozen::frozen(is.read_bool()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_visibility = ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_visibility::visibility(is.read_bool()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_width = ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_width::width(is.read_int32()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_type_option_data = ::std::option::Option::Some(FieldChangesetPayload_oneof_one_of_type_option_data::type_option_data(is.read_bytes()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_id);
        }
        if !self.grid_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.grid_id);
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_name {
            match v {
                &FieldChangesetPayload_oneof_one_of_name::name(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_desc {
            match v {
                &FieldChangesetPayload_oneof_one_of_desc::desc(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_field_type {
            match v {
                &FieldChangesetPayload_oneof_one_of_field_type::field_type(v) => {
                    my_size += ::protobuf::rt::enum_size(5, v);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_frozen {
            match v {
                &FieldChangesetPayload_oneof_one_of_frozen::frozen(v) => {
                    my_size += 2;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_visibility {
            match v {
                &FieldChangesetPayload_oneof_one_of_visibility::visibility(v) => {
                    my_size += 2;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_width {
            match v {
                &FieldChangesetPayload_oneof_one_of_width::width(v) => {
                    my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_type_option_data {
            match v {
                &FieldChangesetPayload_oneof_one_of_type_option_data::type_option_data(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(9, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.field_id.is_empty() {
            os.write_string(1, &self.field_id)?;
        }
        if !self.grid_id.is_empty() {
            os.write_string(2, &self.grid_id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_name {
            match v {
                &FieldChangesetPayload_oneof_one_of_name::name(ref v) => {
                    os.write_string(3, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_desc {
            match v {
                &FieldChangesetPayload_oneof_one_of_desc::desc(ref v) => {
                    os.write_string(4, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_field_type {
            match v {
                &FieldChangesetPayload_oneof_one_of_field_type::field_type(v) => {
                    os.write_enum(5, ::protobuf::ProtobufEnum::value(&v))?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_frozen {
            match v {
                &FieldChangesetPayload_oneof_one_of_frozen::frozen(v) => {
                    os.write_bool(6, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_visibility {
            match v {
                &FieldChangesetPayload_oneof_one_of_visibility::visibility(v) => {
                    os.write_bool(7, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_width {
            match v {
                &FieldChangesetPayload_oneof_one_of_width::width(v) => {
                    os.write_int32(8, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_type_option_data {
            match v {
                &FieldChangesetPayload_oneof_one_of_type_option_data::type_option_data(ref v) => {
                    os.write_bytes(9, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FieldChangesetPayload {
        FieldChangesetPayload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "field_id",
                |m: &FieldChangesetPayload| { &m.field_id },
                |m: &mut FieldChangesetPayload| { &mut m.field_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "grid_id",
                |m: &FieldChangesetPayload| { &m.grid_id },
                |m: &mut FieldChangesetPayload| { &mut m.grid_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "name",
                FieldChangesetPayload::has_name,
                FieldChangesetPayload::get_name,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "desc",
                FieldChangesetPayload::has_desc,
                FieldChangesetPayload::get_desc,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor::<_, FieldType>(
                "field_type",
                FieldChangesetPayload::has_field_type,
                FieldChangesetPayload::get_field_type,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "frozen",
                FieldChangesetPayload::has_frozen,
                FieldChangesetPayload::get_frozen,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "visibility",
                FieldChangesetPayload::has_visibility,
                FieldChangesetPayload::get_visibility,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor::<_>(
                "width",
                FieldChangesetPayload::has_width,
                FieldChangesetPayload::get_width,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "type_option_data",
                FieldChangesetPayload::has_type_option_data,
                FieldChangesetPayload::get_type_option_data,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FieldChangesetPayload>(
                "FieldChangesetPayload",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FieldChangesetPayload {
        static instance: ::protobuf::rt::LazyV2<FieldChangesetPayload> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FieldChangesetPayload::new)
    }
}

impl ::protobuf::Clear for FieldChangesetPayload {
    fn clear(&mut self) {
        self.field_id.clear();
        self.grid_id.clear();
        self.one_of_name = ::std::option::Option::None;
        self.one_of_desc = ::std::option::Option::None;
        self.one_of_field_type = ::std::option::Option::None;
        self.one_of_frozen = ::std::option::Option::None;
        self.one_of_visibility = ::std::option::Option::None;
        self.one_of_width = ::std::option::Option::None;
        self.one_of_type_option_data = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FieldChangesetPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FieldChangesetPayload {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MoveItemPayload {
    // message fields
    pub grid_id: ::std::string::String,
    pub item_id: ::std::string::String,
    pub from_index: i32,
    pub to_index: i32,
    pub ty: MoveItemType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MoveItemPayload {
    fn default() -> &'a MoveItemPayload {
        <MoveItemPayload as ::protobuf::Message>::default_instance()
    }
}

impl MoveItemPayload {
    pub fn new() -> MoveItemPayload {
        ::std::default::Default::default()
    }

    // string grid_id = 1;


    pub fn get_grid_id(&self) -> &str {
        &self.grid_id
    }
    pub fn clear_grid_id(&mut self) {
        self.grid_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_grid_id(&mut self, v: ::std::string::String) {
        self.grid_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_grid_id(&mut self) -> &mut ::std::string::String {
        &mut self.grid_id
    }

    // Take field
    pub fn take_grid_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.grid_id, ::std::string::String::new())
    }

    // string item_id = 2;


    pub fn get_item_id(&self) -> &str {
        &self.item_id
    }
    pub fn clear_item_id(&mut self) {
        self.item_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_item_id(&mut self, v: ::std::string::String) {
        self.item_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_item_id(&mut self) -> &mut ::std::string::String {
        &mut self.item_id
    }

    // Take field
    pub fn take_item_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.item_id, ::std::string::String::new())
    }

    // int32 from_index = 3;


    pub fn get_from_index(&self) -> i32 {
        self.from_index
    }
    pub fn clear_from_index(&mut self) {
        self.from_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_from_index(&mut self, v: i32) {
        self.from_index = v;
    }

    // int32 to_index = 4;


    pub fn get_to_index(&self) -> i32 {
        self.to_index
    }
    pub fn clear_to_index(&mut self) {
        self.to_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_to_index(&mut self, v: i32) {
        self.to_index = v;
    }

    // .MoveItemType ty = 5;


    pub fn get_ty(&self) -> MoveItemType {
        self.ty
    }
    pub fn clear_ty(&mut self) {
        self.ty = MoveItemType::MoveField;
    }

    // Param is passed by value, moved
    pub fn set_ty(&mut self, v: MoveItemType) {
        self.ty = v;
    }
}

impl ::protobuf::Message for MoveItemPayload {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.grid_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.item_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.from_index = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.to_index = tmp;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.ty, 5, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.grid_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.grid_id);
        }
        if !self.item_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.item_id);
        }
        if self.from_index != 0 {
            my_size += ::protobuf::rt::value_size(3, self.from_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.to_index != 0 {
            my_size += ::protobuf::rt::value_size(4, self.to_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ty != MoveItemType::MoveField {
            my_size += ::protobuf::rt::enum_size(5, self.ty);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.grid_id.is_empty() {
            os.write_string(1, &self.grid_id)?;
        }
        if !self.item_id.is_empty() {
            os.write_string(2, &self.item_id)?;
        }
        if self.from_index != 0 {
            os.write_int32(3, self.from_index)?;
        }
        if self.to_index != 0 {
            os.write_int32(4, self.to_index)?;
        }
        if self.ty != MoveItemType::MoveField {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&self.ty))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MoveItemPayload {
        MoveItemPayload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "grid_id",
                |m: &MoveItemPayload| { &m.grid_id },
                |m: &mut MoveItemPayload| { &mut m.grid_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "item_id",
                |m: &MoveItemPayload| { &m.item_id },
                |m: &mut MoveItemPayload| { &mut m.item_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "from_index",
                |m: &MoveItemPayload| { &m.from_index },
                |m: &mut MoveItemPayload| { &mut m.from_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "to_index",
                |m: &MoveItemPayload| { &m.to_index },
                |m: &mut MoveItemPayload| { &mut m.to_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<MoveItemType>>(
                "ty",
                |m: &MoveItemPayload| { &m.ty },
                |m: &mut MoveItemPayload| { &mut m.ty },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MoveItemPayload>(
                "MoveItemPayload",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MoveItemPayload {
        static instance: ::protobuf::rt::LazyV2<MoveItemPayload> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MoveItemPayload::new)
    }
}

impl ::protobuf::Clear for MoveItemPayload {
    fn clear(&mut self) {
        self.grid_id.clear();
        self.item_id.clear();
        self.from_index = 0;
        self.to_index = 0;
        self.ty = MoveItemType::MoveField;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MoveItemPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MoveItemPayload {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CellChangeset {
    // message fields
    pub grid_id: ::std::string::String,
    pub row_id: ::std::string::String,
    pub field_id: ::std::string::String,
    // message oneof groups
    pub one_of_data: ::std::option::Option<CellChangeset_oneof_one_of_data>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CellChangeset {
    fn default() -> &'a CellChangeset {
        <CellChangeset as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum CellChangeset_oneof_one_of_data {
    data(::std::string::String),
}

impl CellChangeset {
    pub fn new() -> CellChangeset {
        ::std::default::Default::default()
    }

    // string grid_id = 1;


    pub fn get_grid_id(&self) -> &str {
        &self.grid_id
    }
    pub fn clear_grid_id(&mut self) {
        self.grid_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_grid_id(&mut self, v: ::std::string::String) {
        self.grid_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_grid_id(&mut self) -> &mut ::std::string::String {
        &mut self.grid_id
    }

    // Take field
    pub fn take_grid_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.grid_id, ::std::string::String::new())
    }

    // string row_id = 2;


    pub fn get_row_id(&self) -> &str {
        &self.row_id
    }
    pub fn clear_row_id(&mut self) {
        self.row_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_row_id(&mut self, v: ::std::string::String) {
        self.row_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_row_id(&mut self) -> &mut ::std::string::String {
        &mut self.row_id
    }

    // Take field
    pub fn take_row_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.row_id, ::std::string::String::new())
    }

    // string field_id = 3;


    pub fn get_field_id(&self) -> &str {
        &self.field_id
    }
    pub fn clear_field_id(&mut self) {
        self.field_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_id(&mut self, v: ::std::string::String) {
        self.field_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_id(&mut self) -> &mut ::std::string::String {
        &mut self.field_id
    }

    // Take field
    pub fn take_field_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_id, ::std::string::String::new())
    }

    // string data = 4;


    pub fn get_data(&self) -> &str {
        match self.one_of_data {
            ::std::option::Option::Some(CellChangeset_oneof_one_of_data::data(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_data(&mut self) {
        self.one_of_data = ::std::option::Option::None;
    }

    pub fn has_data(&self) -> bool {
        match self.one_of_data {
            ::std::option::Option::Some(CellChangeset_oneof_one_of_data::data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::string::String) {
        self.one_of_data = ::std::option::Option::Some(CellChangeset_oneof_one_of_data::data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_data(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(CellChangeset_oneof_one_of_data::data(_)) = self.one_of_data {
        } else {
            self.one_of_data = ::std::option::Option::Some(CellChangeset_oneof_one_of_data::data(::std::string::String::new()));
        }
        match self.one_of_data {
            ::std::option::Option::Some(CellChangeset_oneof_one_of_data::data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::string::String {
        if self.has_data() {
            match self.one_of_data.take() {
                ::std::option::Option::Some(CellChangeset_oneof_one_of_data::data(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for CellChangeset {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.grid_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.row_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_id)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_data = ::std::option::Option::Some(CellChangeset_oneof_one_of_data::data(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.grid_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.grid_id);
        }
        if !self.row_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.row_id);
        }
        if !self.field_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.field_id);
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_data {
            match v {
                &CellChangeset_oneof_one_of_data::data(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.grid_id.is_empty() {
            os.write_string(1, &self.grid_id)?;
        }
        if !self.row_id.is_empty() {
            os.write_string(2, &self.row_id)?;
        }
        if !self.field_id.is_empty() {
            os.write_string(3, &self.field_id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_data {
            match v {
                &CellChangeset_oneof_one_of_data::data(ref v) => {
                    os.write_string(4, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CellChangeset {
        CellChangeset::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "grid_id",
                |m: &CellChangeset| { &m.grid_id },
                |m: &mut CellChangeset| { &mut m.grid_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "row_id",
                |m: &CellChangeset| { &m.row_id },
                |m: &mut CellChangeset| { &mut m.row_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "field_id",
                |m: &CellChangeset| { &m.field_id },
                |m: &mut CellChangeset| { &mut m.field_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "data",
                CellChangeset::has_data,
                CellChangeset::get_data,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CellChangeset>(
                "CellChangeset",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CellChangeset {
        static instance: ::protobuf::rt::LazyV2<CellChangeset> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CellChangeset::new)
    }
}

impl ::protobuf::Clear for CellChangeset {
    fn clear(&mut self) {
        self.grid_id.clear();
        self.row_id.clear();
        self.field_id.clear();
        self.one_of_data = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CellChangeset {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CellChangeset {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum MoveItemType {
    MoveField = 0,
    MoveRow = 1,
}

impl ::protobuf::ProtobufEnum for MoveItemType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MoveItemType> {
        match value {
            0 => ::std::option::Option::Some(MoveItemType::MoveField),
            1 => ::std::option::Option::Some(MoveItemType::MoveRow),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MoveItemType] = &[
            MoveItemType::MoveField,
            MoveItemType::MoveRow,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<MoveItemType>("MoveItemType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for MoveItemType {
}

impl ::std::default::Default for MoveItemType {
    fn default() -> Self {
        MoveItemType::MoveField
    }
}

impl ::protobuf::reflect::ProtobufValue for MoveItemType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum FieldType {
    RichText = 0,
    Number = 1,
    DateTime = 2,
    SingleSelect = 3,
    MultiSelect = 4,
    Checkbox = 5,
}

impl ::protobuf::ProtobufEnum for FieldType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FieldType> {
        match value {
            0 => ::std::option::Option::Some(FieldType::RichText),
            1 => ::std::option::Option::Some(FieldType::Number),
            2 => ::std::option::Option::Some(FieldType::DateTime),
            3 => ::std::option::Option::Some(FieldType::SingleSelect),
            4 => ::std::option::Option::Some(FieldType::MultiSelect),
            5 => ::std::option::Option::Some(FieldType::Checkbox),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [FieldType] = &[
            FieldType::RichText,
            FieldType::Number,
            FieldType::DateTime,
            FieldType::SingleSelect,
            FieldType::MultiSelect,
            FieldType::Checkbox,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<FieldType>("FieldType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for FieldType {
}

impl ::std::default::Default for FieldType {
    fn default() -> Self {
        FieldType::RichText
    }
}

impl ::protobuf::reflect::ProtobufValue for FieldType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\ngrid.proto\"z\n\x04Grid\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\
    \x12.\n\x0cfield_orders\x18\x02\x20\x03(\x0b2\x0b.FieldOrderR\x0bfieldOr\
    ders\x122\n\x0cblock_orders\x18\x03\x20\x03(\x0b2\x0f.GridBlockOrderR\
    \x0bblockOrders\"\xd7\x01\n\x05Field\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\
    \x02id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12\x12\n\x04desc\
    \x18\x03\x20\x01(\tR\x04desc\x12)\n\nfield_type\x18\x04\x20\x01(\x0e2\n.\
    FieldTypeR\tfieldType\x12\x16\n\x06frozen\x18\x05\x20\x01(\x08R\x06froze\
    n\x12\x1e\n\nvisibility\x18\x06\x20\x01(\x08R\nvisibility\x12\x14\n\x05w\
    idth\x18\x07\x20\x01(\x05R\x05width\x12\x1d\n\nis_primary\x18\x08\x20\
    \x01(\x08R\tisPrimary\"'\n\nFieldOrder\x12\x19\n\x08field_id\x18\x01\x20\
    \x01(\tR\x07fieldId\"\xc6\x01\n\x12GridFieldChangeset\x12\x17\n\x07grid_\
    id\x18\x01\x20\x01(\tR\x06gridId\x124\n\x0finserted_fields\x18\x02\x20\
    \x03(\x0b2\x0b.IndexFieldR\x0einsertedFields\x122\n\x0edeleted_fields\
    \x18\x03\x20\x03(\x0b2\x0b.FieldOrderR\rdeletedFields\x12-\n\x0eupdated_\
    fields\x18\x04\x20\x03(\x0b2\x06.FieldR\rupdatedFields\"@\n\nIndexField\
    \x12\x1c\n\x05field\x18\x01\x20\x01(\x0b2\x06.FieldR\x05field\x12\x14\n\
    \x05index\x18\x02\x20\x01(\x05R\x05index\"\x90\x01\n\x1aGetEditFieldCont\
    extPayload\x12\x17\n\x07grid_id\x18\x01\x20\x01(\tR\x06gridId\x12\x1b\n\
    \x08field_id\x18\x02\x20\x01(\tH\0R\x07fieldId\x12)\n\nfield_type\x18\
    \x03\x20\x01(\x0e2\n.FieldTypeR\tfieldTypeB\x11\n\x0fone_of_field_id\"q\
    \n\x10EditFieldPayload\x12\x17\n\x07grid_id\x18\x01\x20\x01(\tR\x06gridI\
    d\x12\x19\n\x08field_id\x18\x02\x20\x01(\tR\x07fieldId\x12)\n\nfield_typ\
    e\x18\x03\x20\x01(\x0e2\n.FieldTypeR\tfieldType\"|\n\x10EditFieldContext\
    \x12\x17\n\x07grid_id\x18\x01\x20\x01(\tR\x06gridId\x12%\n\ngrid_field\
    \x18\x02\x20\x01(\x0b2\x06.FieldR\tgridField\x12(\n\x10type_option_data\
    \x18\x03\x20\x01(\x0cR\x0etypeOptionData\"-\n\rRepeatedField\x12\x1c\n\
    \x05items\x18\x01\x20\x03(\x0b2\x06.FieldR\x05items\"7\n\x12RepeatedFiel\
    dOrder\x12!\n\x05items\x18\x01\x20\x03(\x0b2\x0b.FieldOrderR\x05items\"T\
    \n\x08RowOrder\x12\x15\n\x06row_id\x18\x01\x20\x01(\tR\x05rowId\x12\x19\
    \n\x08block_id\x18\x02\x20\x01(\tR\x07blockId\x12\x16\n\x06height\x18\
    \x03\x20\x01(\x05R\x06height\"\xb8\x01\n\x03Row\x12\x0e\n\x02id\x18\x01\
    \x20\x01(\tR\x02id\x12@\n\x10cell_by_field_id\x18\x02\x20\x03(\x0b2\x17.\
    Row.CellByFieldIdEntryR\rcellByFieldId\x12\x16\n\x06height\x18\x03\x20\
    \x01(\x05R\x06height\x1aG\n\x12CellByFieldIdEntry\x12\x10\n\x03key\x18\
    \x01\x20\x01(\tR\x03key\x12\x1b\n\x05value\x18\x02\x20\x01(\x0b2\x05.Cel\
    lR\x05value:\x028\x01\")\n\x0bRepeatedRow\x12\x1a\n\x05items\x18\x01\x20\
    \x03(\x0b2\x04.RowR\x05items\"5\n\x11RepeatedGridBlock\x12\x20\n\x05item\
    s\x18\x01\x20\x03(\x0b2\n.GridBlockR\x05items\"U\n\x0eGridBlockOrder\x12\
    \x19\n\x08block_id\x18\x01\x20\x01(\tR\x07blockId\x12(\n\nrow_orders\x18\
    \x02\x20\x03(\x0b2\t.RowOrderR\trowOrders\"_\n\rIndexRowOrder\x12&\n\tro\
    w_order\x18\x01\x20\x01(\x0b2\t.RowOrderR\x08rowOrder\x12\x16\n\x05index\
    \x18\x02\x20\x01(\x05H\0R\x05indexB\x0e\n\x0cone_of_index\"Q\n\x0fUpdate\
    dRowOrder\x12&\n\trow_order\x18\x01\x20\x01(\x0b2\t.RowOrderR\x08rowOrde\
    r\x12\x16\n\x03row\x18\x02\x20\x01(\x0b2\x04.RowR\x03row\"\xc6\x01\n\x11\
    GridRowsChangeset\x12\x19\n\x08block_id\x18\x01\x20\x01(\tR\x07blockId\
    \x123\n\rinserted_rows\x18\x02\x20\x03(\x0b2\x0e.IndexRowOrderR\x0cinser\
    tedRows\x12,\n\x0cdeleted_rows\x18\x03\x20\x03(\x0b2\t.RowOrderR\x0bdele\
    tedRows\x123\n\x0cupdated_rows\x18\x04\x20\x03(\x0b2\x10.UpdatedRowOrder\
    R\x0bupdatedRows\"E\n\tGridBlock\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02\
    id\x12(\n\nrow_orders\x18\x02\x20\x03(\x0b2\t.RowOrderR\trowOrders\";\n\
    \x04Cell\x12\x19\n\x08field_id\x18\x01\x20\x01(\tR\x07fieldId\x12\x18\n\
    \x07content\x18\x02\x20\x01(\tR\x07content\"+\n\x0cRepeatedCell\x12\x1b\
    \n\x05items\x18\x01\x20\x03(\x0b2\x05.CellR\x05items\"'\n\x11CreateGridP\
    ayload\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\"\x1e\n\x06GridId\
    \x12\x14\n\x05value\x18\x01\x20\x01(\tR\x05value\"#\n\x0bGridBlockId\x12\
    \x14\n\x05value\x18\x01\x20\x01(\tR\x05value\"f\n\x10CreateRowPayload\
    \x12\x17\n\x07grid_id\x18\x01\x20\x01(\tR\x06gridId\x12\"\n\x0cstart_row\
    _id\x18\x02\x20\x01(\tH\0R\nstartRowIdB\x15\n\x13one_of_start_row_id\"\
    \xb6\x01\n\x12InsertFieldPayload\x12\x17\n\x07grid_id\x18\x01\x20\x01(\t\
    R\x06gridId\x12\x1c\n\x05field\x18\x02\x20\x01(\x0b2\x06.FieldR\x05field\
    \x12(\n\x10type_option_data\x18\x03\x20\x01(\x0cR\x0etypeOptionData\x12&\
    \n\x0estart_field_id\x18\x04\x20\x01(\tH\0R\x0cstartFieldIdB\x17\n\x15on\
    e_of_start_field_id\"d\n\x11QueryFieldPayload\x12\x17\n\x07grid_id\x18\
    \x01\x20\x01(\tR\x06gridId\x126\n\x0cfield_orders\x18\x02\x20\x01(\x0b2\
    \x13.RepeatedFieldOrderR\x0bfieldOrders\"e\n\x16QueryGridBlocksPayload\
    \x12\x17\n\x07grid_id\x18\x01\x20\x01(\tR\x06gridId\x122\n\x0cblock_orde\
    rs\x18\x02\x20\x03(\x0b2\x0f.GridBlockOrderR\x0bblockOrders\"\xa8\x03\n\
    \x15FieldChangesetPayload\x12\x19\n\x08field_id\x18\x01\x20\x01(\tR\x07f\
    ieldId\x12\x17\n\x07grid_id\x18\x02\x20\x01(\tR\x06gridId\x12\x14\n\x04n\
    ame\x18\x03\x20\x01(\tH\0R\x04name\x12\x14\n\x04desc\x18\x04\x20\x01(\tH\
    \x01R\x04desc\x12+\n\nfield_type\x18\x05\x20\x01(\x0e2\n.FieldTypeH\x02R\
    \tfieldType\x12\x18\n\x06frozen\x18\x06\x20\x01(\x08H\x03R\x06frozen\x12\
    \x20\n\nvisibility\x18\x07\x20\x01(\x08H\x04R\nvisibility\x12\x16\n\x05w\
    idth\x18\x08\x20\x01(\x05H\x05R\x05width\x12*\n\x10type_option_data\x18\
    \t\x20\x01(\x0cH\x06R\x0etypeOptionDataB\r\n\x0bone_of_nameB\r\n\x0bone_\
    of_descB\x13\n\x11one_of_field_typeB\x0f\n\rone_of_frozenB\x13\n\x11one_\
    of_visibilityB\x0e\n\x0cone_of_widthB\x19\n\x17one_of_type_option_data\"\
    \x9c\x01\n\x0fMoveItemPayload\x12\x17\n\x07grid_id\x18\x01\x20\x01(\tR\
    \x06gridId\x12\x17\n\x07item_id\x18\x02\x20\x01(\tR\x06itemId\x12\x1d\n\
    \nfrom_index\x18\x03\x20\x01(\x05R\tfromIndex\x12\x19\n\x08to_index\x18\
    \x04\x20\x01(\x05R\x07toIndex\x12\x1d\n\x02ty\x18\x05\x20\x01(\x0e2\r.Mo\
    veItemTypeR\x02ty\"\x7f\n\rCellChangeset\x12\x17\n\x07grid_id\x18\x01\
    \x20\x01(\tR\x06gridId\x12\x15\n\x06row_id\x18\x02\x20\x01(\tR\x05rowId\
    \x12\x19\n\x08field_id\x18\x03\x20\x01(\tR\x07fieldId\x12\x14\n\x04data\
    \x18\x04\x20\x01(\tH\0R\x04dataB\r\n\x0bone_of_data**\n\x0cMoveItemType\
    \x12\r\n\tMoveField\x10\0\x12\x0b\n\x07MoveRow\x10\x01*d\n\tFieldType\
    \x12\x0c\n\x08RichText\x10\0\x12\n\n\x06Number\x10\x01\x12\x0c\n\x08Date\
    Time\x10\x02\x12\x10\n\x0cSingleSelect\x10\x03\x12\x0f\n\x0bMultiSelect\
    \x10\x04\x12\x0c\n\x08Checkbox\x10\x05b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
