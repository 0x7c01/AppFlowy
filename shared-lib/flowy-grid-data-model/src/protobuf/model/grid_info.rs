// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `grid_info.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct ViewExtData {
    // message fields
    pub filter: ::protobuf::SingularPtrField<ViewFilter>,
    pub group: ::protobuf::SingularPtrField<ViewGroup>,
    pub sort: ::protobuf::SingularPtrField<ViewSort>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ViewExtData {
    fn default() -> &'a ViewExtData {
        <ViewExtData as ::protobuf::Message>::default_instance()
    }
}

impl ViewExtData {
    pub fn new() -> ViewExtData {
        ::std::default::Default::default()
    }

    // .ViewFilter filter = 1;


    pub fn get_filter(&self) -> &ViewFilter {
        self.filter.as_ref().unwrap_or_else(|| <ViewFilter as ::protobuf::Message>::default_instance())
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    pub fn has_filter(&self) -> bool {
        self.filter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ViewFilter) {
        self.filter = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ViewFilter {
        if self.filter.is_none() {
            self.filter.set_default();
        }
        self.filter.as_mut().unwrap()
    }

    // Take field
    pub fn take_filter(&mut self) -> ViewFilter {
        self.filter.take().unwrap_or_else(|| ViewFilter::new())
    }

    // .ViewGroup group = 2;


    pub fn get_group(&self) -> &ViewGroup {
        self.group.as_ref().unwrap_or_else(|| <ViewGroup as ::protobuf::Message>::default_instance())
    }
    pub fn clear_group(&mut self) {
        self.group.clear();
    }

    pub fn has_group(&self) -> bool {
        self.group.is_some()
    }

    // Param is passed by value, moved
    pub fn set_group(&mut self, v: ViewGroup) {
        self.group = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group(&mut self) -> &mut ViewGroup {
        if self.group.is_none() {
            self.group.set_default();
        }
        self.group.as_mut().unwrap()
    }

    // Take field
    pub fn take_group(&mut self) -> ViewGroup {
        self.group.take().unwrap_or_else(|| ViewGroup::new())
    }

    // .ViewSort sort = 3;


    pub fn get_sort(&self) -> &ViewSort {
        self.sort.as_ref().unwrap_or_else(|| <ViewSort as ::protobuf::Message>::default_instance())
    }
    pub fn clear_sort(&mut self) {
        self.sort.clear();
    }

    pub fn has_sort(&self) -> bool {
        self.sort.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sort(&mut self, v: ViewSort) {
        self.sort = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sort(&mut self) -> &mut ViewSort {
        if self.sort.is_none() {
            self.sort.set_default();
        }
        self.sort.as_mut().unwrap()
    }

    // Take field
    pub fn take_sort(&mut self) -> ViewSort {
        self.sort.take().unwrap_or_else(|| ViewSort::new())
    }
}

impl ::protobuf::Message for ViewExtData {
    fn is_initialized(&self) -> bool {
        for v in &self.filter {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.group {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sort {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.filter)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.group)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sort)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.filter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.group.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.sort.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.filter.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.group.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.sort.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ViewExtData {
        ViewExtData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ViewFilter>>(
                "filter",
                |m: &ViewExtData| { &m.filter },
                |m: &mut ViewExtData| { &mut m.filter },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ViewGroup>>(
                "group",
                |m: &ViewExtData| { &m.group },
                |m: &mut ViewExtData| { &mut m.group },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ViewSort>>(
                "sort",
                |m: &ViewExtData| { &m.sort },
                |m: &mut ViewExtData| { &mut m.sort },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ViewExtData>(
                "ViewExtData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ViewExtData {
        static instance: ::protobuf::rt::LazyV2<ViewExtData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ViewExtData::new)
    }
}

impl ::protobuf::Clear for ViewExtData {
    fn clear(&mut self) {
        self.filter.clear();
        self.group.clear();
        self.sort.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ViewExtData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ViewExtData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ViewFilter {
    // message oneof groups
    pub one_of_field_id: ::std::option::Option<ViewFilter_oneof_one_of_field_id>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ViewFilter {
    fn default() -> &'a ViewFilter {
        <ViewFilter as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ViewFilter_oneof_one_of_field_id {
    field_id(::std::string::String),
}

impl ViewFilter {
    pub fn new() -> ViewFilter {
        ::std::default::Default::default()
    }

    // string field_id = 1;


    pub fn get_field_id(&self) -> &str {
        match self.one_of_field_id {
            ::std::option::Option::Some(ViewFilter_oneof_one_of_field_id::field_id(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_field_id(&mut self) {
        self.one_of_field_id = ::std::option::Option::None;
    }

    pub fn has_field_id(&self) -> bool {
        match self.one_of_field_id {
            ::std::option::Option::Some(ViewFilter_oneof_one_of_field_id::field_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_field_id(&mut self, v: ::std::string::String) {
        self.one_of_field_id = ::std::option::Option::Some(ViewFilter_oneof_one_of_field_id::field_id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_field_id(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(ViewFilter_oneof_one_of_field_id::field_id(_)) = self.one_of_field_id {
        } else {
            self.one_of_field_id = ::std::option::Option::Some(ViewFilter_oneof_one_of_field_id::field_id(::std::string::String::new()));
        }
        match self.one_of_field_id {
            ::std::option::Option::Some(ViewFilter_oneof_one_of_field_id::field_id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_field_id(&mut self) -> ::std::string::String {
        if self.has_field_id() {
            match self.one_of_field_id.take() {
                ::std::option::Option::Some(ViewFilter_oneof_one_of_field_id::field_id(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for ViewFilter {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_field_id = ::std::option::Option::Some(ViewFilter_oneof_one_of_field_id::field_id(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.one_of_field_id {
            match v {
                &ViewFilter_oneof_one_of_field_id::field_id(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.one_of_field_id {
            match v {
                &ViewFilter_oneof_one_of_field_id::field_id(ref v) => {
                    os.write_string(1, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ViewFilter {
        ViewFilter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "field_id",
                ViewFilter::has_field_id,
                ViewFilter::get_field_id,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ViewFilter>(
                "ViewFilter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ViewFilter {
        static instance: ::protobuf::rt::LazyV2<ViewFilter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ViewFilter::new)
    }
}

impl ::protobuf::Clear for ViewFilter {
    fn clear(&mut self) {
        self.one_of_field_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ViewFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ViewFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ViewGroup {
    // message oneof groups
    pub one_of_group_field_id: ::std::option::Option<ViewGroup_oneof_one_of_group_field_id>,
    pub one_of_sub_group_field_id: ::std::option::Option<ViewGroup_oneof_one_of_sub_group_field_id>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ViewGroup {
    fn default() -> &'a ViewGroup {
        <ViewGroup as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ViewGroup_oneof_one_of_group_field_id {
    group_field_id(::std::string::String),
}

#[derive(Clone,PartialEq,Debug)]
pub enum ViewGroup_oneof_one_of_sub_group_field_id {
    sub_group_field_id(::std::string::String),
}

impl ViewGroup {
    pub fn new() -> ViewGroup {
        ::std::default::Default::default()
    }

    // string group_field_id = 1;


    pub fn get_group_field_id(&self) -> &str {
        match self.one_of_group_field_id {
            ::std::option::Option::Some(ViewGroup_oneof_one_of_group_field_id::group_field_id(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_group_field_id(&mut self) {
        self.one_of_group_field_id = ::std::option::Option::None;
    }

    pub fn has_group_field_id(&self) -> bool {
        match self.one_of_group_field_id {
            ::std::option::Option::Some(ViewGroup_oneof_one_of_group_field_id::group_field_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_group_field_id(&mut self, v: ::std::string::String) {
        self.one_of_group_field_id = ::std::option::Option::Some(ViewGroup_oneof_one_of_group_field_id::group_field_id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_group_field_id(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(ViewGroup_oneof_one_of_group_field_id::group_field_id(_)) = self.one_of_group_field_id {
        } else {
            self.one_of_group_field_id = ::std::option::Option::Some(ViewGroup_oneof_one_of_group_field_id::group_field_id(::std::string::String::new()));
        }
        match self.one_of_group_field_id {
            ::std::option::Option::Some(ViewGroup_oneof_one_of_group_field_id::group_field_id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_group_field_id(&mut self) -> ::std::string::String {
        if self.has_group_field_id() {
            match self.one_of_group_field_id.take() {
                ::std::option::Option::Some(ViewGroup_oneof_one_of_group_field_id::group_field_id(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string sub_group_field_id = 2;


    pub fn get_sub_group_field_id(&self) -> &str {
        match self.one_of_sub_group_field_id {
            ::std::option::Option::Some(ViewGroup_oneof_one_of_sub_group_field_id::sub_group_field_id(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_sub_group_field_id(&mut self) {
        self.one_of_sub_group_field_id = ::std::option::Option::None;
    }

    pub fn has_sub_group_field_id(&self) -> bool {
        match self.one_of_sub_group_field_id {
            ::std::option::Option::Some(ViewGroup_oneof_one_of_sub_group_field_id::sub_group_field_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sub_group_field_id(&mut self, v: ::std::string::String) {
        self.one_of_sub_group_field_id = ::std::option::Option::Some(ViewGroup_oneof_one_of_sub_group_field_id::sub_group_field_id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sub_group_field_id(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(ViewGroup_oneof_one_of_sub_group_field_id::sub_group_field_id(_)) = self.one_of_sub_group_field_id {
        } else {
            self.one_of_sub_group_field_id = ::std::option::Option::Some(ViewGroup_oneof_one_of_sub_group_field_id::sub_group_field_id(::std::string::String::new()));
        }
        match self.one_of_sub_group_field_id {
            ::std::option::Option::Some(ViewGroup_oneof_one_of_sub_group_field_id::sub_group_field_id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sub_group_field_id(&mut self) -> ::std::string::String {
        if self.has_sub_group_field_id() {
            match self.one_of_sub_group_field_id.take() {
                ::std::option::Option::Some(ViewGroup_oneof_one_of_sub_group_field_id::sub_group_field_id(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for ViewGroup {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_group_field_id = ::std::option::Option::Some(ViewGroup_oneof_one_of_group_field_id::group_field_id(is.read_string()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_sub_group_field_id = ::std::option::Option::Some(ViewGroup_oneof_one_of_sub_group_field_id::sub_group_field_id(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.one_of_group_field_id {
            match v {
                &ViewGroup_oneof_one_of_group_field_id::group_field_id(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_sub_group_field_id {
            match v {
                &ViewGroup_oneof_one_of_sub_group_field_id::sub_group_field_id(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.one_of_group_field_id {
            match v {
                &ViewGroup_oneof_one_of_group_field_id::group_field_id(ref v) => {
                    os.write_string(1, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_sub_group_field_id {
            match v {
                &ViewGroup_oneof_one_of_sub_group_field_id::sub_group_field_id(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ViewGroup {
        ViewGroup::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "group_field_id",
                ViewGroup::has_group_field_id,
                ViewGroup::get_group_field_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "sub_group_field_id",
                ViewGroup::has_sub_group_field_id,
                ViewGroup::get_sub_group_field_id,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ViewGroup>(
                "ViewGroup",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ViewGroup {
        static instance: ::protobuf::rt::LazyV2<ViewGroup> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ViewGroup::new)
    }
}

impl ::protobuf::Clear for ViewGroup {
    fn clear(&mut self) {
        self.one_of_group_field_id = ::std::option::Option::None;
        self.one_of_sub_group_field_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ViewGroup {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ViewGroup {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ViewSort {
    // message oneof groups
    pub one_of_field_id: ::std::option::Option<ViewSort_oneof_one_of_field_id>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ViewSort {
    fn default() -> &'a ViewSort {
        <ViewSort as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ViewSort_oneof_one_of_field_id {
    field_id(::std::string::String),
}

impl ViewSort {
    pub fn new() -> ViewSort {
        ::std::default::Default::default()
    }

    // string field_id = 1;


    pub fn get_field_id(&self) -> &str {
        match self.one_of_field_id {
            ::std::option::Option::Some(ViewSort_oneof_one_of_field_id::field_id(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_field_id(&mut self) {
        self.one_of_field_id = ::std::option::Option::None;
    }

    pub fn has_field_id(&self) -> bool {
        match self.one_of_field_id {
            ::std::option::Option::Some(ViewSort_oneof_one_of_field_id::field_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_field_id(&mut self, v: ::std::string::String) {
        self.one_of_field_id = ::std::option::Option::Some(ViewSort_oneof_one_of_field_id::field_id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_field_id(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(ViewSort_oneof_one_of_field_id::field_id(_)) = self.one_of_field_id {
        } else {
            self.one_of_field_id = ::std::option::Option::Some(ViewSort_oneof_one_of_field_id::field_id(::std::string::String::new()));
        }
        match self.one_of_field_id {
            ::std::option::Option::Some(ViewSort_oneof_one_of_field_id::field_id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_field_id(&mut self) -> ::std::string::String {
        if self.has_field_id() {
            match self.one_of_field_id.take() {
                ::std::option::Option::Some(ViewSort_oneof_one_of_field_id::field_id(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for ViewSort {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_field_id = ::std::option::Option::Some(ViewSort_oneof_one_of_field_id::field_id(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.one_of_field_id {
            match v {
                &ViewSort_oneof_one_of_field_id::field_id(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.one_of_field_id {
            match v {
                &ViewSort_oneof_one_of_field_id::field_id(ref v) => {
                    os.write_string(1, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ViewSort {
        ViewSort::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "field_id",
                ViewSort::has_field_id,
                ViewSort::get_field_id,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ViewSort>(
                "ViewSort",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ViewSort {
        static instance: ::protobuf::rt::LazyV2<ViewSort> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ViewSort::new)
    }
}

impl ::protobuf::Clear for ViewSort {
    fn clear(&mut self) {
        self.one_of_field_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ViewSort {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ViewSort {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GridInfoChangesetPayload {
    // message fields
    pub grid_id: ::std::string::String,
    // message oneof groups
    pub one_of_filter: ::std::option::Option<GridInfoChangesetPayload_oneof_one_of_filter>,
    pub one_of_group: ::std::option::Option<GridInfoChangesetPayload_oneof_one_of_group>,
    pub one_of_sort: ::std::option::Option<GridInfoChangesetPayload_oneof_one_of_sort>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GridInfoChangesetPayload {
    fn default() -> &'a GridInfoChangesetPayload {
        <GridInfoChangesetPayload as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum GridInfoChangesetPayload_oneof_one_of_filter {
    filter(ViewFilter),
}

#[derive(Clone,PartialEq,Debug)]
pub enum GridInfoChangesetPayload_oneof_one_of_group {
    group(ViewGroup),
}

#[derive(Clone,PartialEq,Debug)]
pub enum GridInfoChangesetPayload_oneof_one_of_sort {
    sort(ViewSort),
}

impl GridInfoChangesetPayload {
    pub fn new() -> GridInfoChangesetPayload {
        ::std::default::Default::default()
    }

    // string grid_id = 1;


    pub fn get_grid_id(&self) -> &str {
        &self.grid_id
    }
    pub fn clear_grid_id(&mut self) {
        self.grid_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_grid_id(&mut self, v: ::std::string::String) {
        self.grid_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_grid_id(&mut self) -> &mut ::std::string::String {
        &mut self.grid_id
    }

    // Take field
    pub fn take_grid_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.grid_id, ::std::string::String::new())
    }

    // .ViewFilter filter = 2;


    pub fn get_filter(&self) -> &ViewFilter {
        match self.one_of_filter {
            ::std::option::Option::Some(GridInfoChangesetPayload_oneof_one_of_filter::filter(ref v)) => v,
            _ => <ViewFilter as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_filter(&mut self) {
        self.one_of_filter = ::std::option::Option::None;
    }

    pub fn has_filter(&self) -> bool {
        match self.one_of_filter {
            ::std::option::Option::Some(GridInfoChangesetPayload_oneof_one_of_filter::filter(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ViewFilter) {
        self.one_of_filter = ::std::option::Option::Some(GridInfoChangesetPayload_oneof_one_of_filter::filter(v))
    }

    // Mutable pointer to the field.
    pub fn mut_filter(&mut self) -> &mut ViewFilter {
        if let ::std::option::Option::Some(GridInfoChangesetPayload_oneof_one_of_filter::filter(_)) = self.one_of_filter {
        } else {
            self.one_of_filter = ::std::option::Option::Some(GridInfoChangesetPayload_oneof_one_of_filter::filter(ViewFilter::new()));
        }
        match self.one_of_filter {
            ::std::option::Option::Some(GridInfoChangesetPayload_oneof_one_of_filter::filter(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_filter(&mut self) -> ViewFilter {
        if self.has_filter() {
            match self.one_of_filter.take() {
                ::std::option::Option::Some(GridInfoChangesetPayload_oneof_one_of_filter::filter(v)) => v,
                _ => panic!(),
            }
        } else {
            ViewFilter::new()
        }
    }

    // .ViewGroup group = 3;


    pub fn get_group(&self) -> &ViewGroup {
        match self.one_of_group {
            ::std::option::Option::Some(GridInfoChangesetPayload_oneof_one_of_group::group(ref v)) => v,
            _ => <ViewGroup as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_group(&mut self) {
        self.one_of_group = ::std::option::Option::None;
    }

    pub fn has_group(&self) -> bool {
        match self.one_of_group {
            ::std::option::Option::Some(GridInfoChangesetPayload_oneof_one_of_group::group(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_group(&mut self, v: ViewGroup) {
        self.one_of_group = ::std::option::Option::Some(GridInfoChangesetPayload_oneof_one_of_group::group(v))
    }

    // Mutable pointer to the field.
    pub fn mut_group(&mut self) -> &mut ViewGroup {
        if let ::std::option::Option::Some(GridInfoChangesetPayload_oneof_one_of_group::group(_)) = self.one_of_group {
        } else {
            self.one_of_group = ::std::option::Option::Some(GridInfoChangesetPayload_oneof_one_of_group::group(ViewGroup::new()));
        }
        match self.one_of_group {
            ::std::option::Option::Some(GridInfoChangesetPayload_oneof_one_of_group::group(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_group(&mut self) -> ViewGroup {
        if self.has_group() {
            match self.one_of_group.take() {
                ::std::option::Option::Some(GridInfoChangesetPayload_oneof_one_of_group::group(v)) => v,
                _ => panic!(),
            }
        } else {
            ViewGroup::new()
        }
    }

    // .ViewSort sort = 4;


    pub fn get_sort(&self) -> &ViewSort {
        match self.one_of_sort {
            ::std::option::Option::Some(GridInfoChangesetPayload_oneof_one_of_sort::sort(ref v)) => v,
            _ => <ViewSort as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_sort(&mut self) {
        self.one_of_sort = ::std::option::Option::None;
    }

    pub fn has_sort(&self) -> bool {
        match self.one_of_sort {
            ::std::option::Option::Some(GridInfoChangesetPayload_oneof_one_of_sort::sort(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sort(&mut self, v: ViewSort) {
        self.one_of_sort = ::std::option::Option::Some(GridInfoChangesetPayload_oneof_one_of_sort::sort(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sort(&mut self) -> &mut ViewSort {
        if let ::std::option::Option::Some(GridInfoChangesetPayload_oneof_one_of_sort::sort(_)) = self.one_of_sort {
        } else {
            self.one_of_sort = ::std::option::Option::Some(GridInfoChangesetPayload_oneof_one_of_sort::sort(ViewSort::new()));
        }
        match self.one_of_sort {
            ::std::option::Option::Some(GridInfoChangesetPayload_oneof_one_of_sort::sort(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sort(&mut self) -> ViewSort {
        if self.has_sort() {
            match self.one_of_sort.take() {
                ::std::option::Option::Some(GridInfoChangesetPayload_oneof_one_of_sort::sort(v)) => v,
                _ => panic!(),
            }
        } else {
            ViewSort::new()
        }
    }
}

impl ::protobuf::Message for GridInfoChangesetPayload {
    fn is_initialized(&self) -> bool {
        if let Some(GridInfoChangesetPayload_oneof_one_of_filter::filter(ref v)) = self.one_of_filter {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(GridInfoChangesetPayload_oneof_one_of_group::group(ref v)) = self.one_of_group {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(GridInfoChangesetPayload_oneof_one_of_sort::sort(ref v)) = self.one_of_sort {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.grid_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_filter = ::std::option::Option::Some(GridInfoChangesetPayload_oneof_one_of_filter::filter(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_group = ::std::option::Option::Some(GridInfoChangesetPayload_oneof_one_of_group::group(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.one_of_sort = ::std::option::Option::Some(GridInfoChangesetPayload_oneof_one_of_sort::sort(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.grid_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.grid_id);
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_filter {
            match v {
                &GridInfoChangesetPayload_oneof_one_of_filter::filter(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_group {
            match v {
                &GridInfoChangesetPayload_oneof_one_of_group::group(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_sort {
            match v {
                &GridInfoChangesetPayload_oneof_one_of_sort::sort(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.grid_id.is_empty() {
            os.write_string(1, &self.grid_id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_filter {
            match v {
                &GridInfoChangesetPayload_oneof_one_of_filter::filter(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_group {
            match v {
                &GridInfoChangesetPayload_oneof_one_of_group::group(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_sort {
            match v {
                &GridInfoChangesetPayload_oneof_one_of_sort::sort(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GridInfoChangesetPayload {
        GridInfoChangesetPayload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "grid_id",
                |m: &GridInfoChangesetPayload| { &m.grid_id },
                |m: &mut GridInfoChangesetPayload| { &mut m.grid_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ViewFilter>(
                "filter",
                GridInfoChangesetPayload::has_filter,
                GridInfoChangesetPayload::get_filter,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ViewGroup>(
                "group",
                GridInfoChangesetPayload::has_group,
                GridInfoChangesetPayload::get_group,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ViewSort>(
                "sort",
                GridInfoChangesetPayload::has_sort,
                GridInfoChangesetPayload::get_sort,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GridInfoChangesetPayload>(
                "GridInfoChangesetPayload",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GridInfoChangesetPayload {
        static instance: ::protobuf::rt::LazyV2<GridInfoChangesetPayload> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GridInfoChangesetPayload::new)
    }
}

impl ::protobuf::Clear for GridInfoChangesetPayload {
    fn clear(&mut self) {
        self.grid_id.clear();
        self.one_of_filter = ::std::option::Option::None;
        self.one_of_group = ::std::option::Option::None;
        self.one_of_sort = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GridInfoChangesetPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GridInfoChangesetPayload {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fgrid_info.proto\"s\n\x0bViewExtData\x12#\n\x06filter\x18\x01\x20\
    \x01(\x0b2\x0b.ViewFilterR\x06filter\x12\x20\n\x05group\x18\x02\x20\x01(\
    \x0b2\n.ViewGroupR\x05group\x12\x1d\n\x04sort\x18\x03\x20\x01(\x0b2\t.Vi\
    ewSortR\x04sort\"<\n\nViewFilter\x12\x1b\n\x08field_id\x18\x01\x20\x01(\
    \tH\0R\x07fieldIdB\x11\n\x0fone_of_field_id\"\x98\x01\n\tViewGroup\x12&\
    \n\x0egroup_field_id\x18\x01\x20\x01(\tH\0R\x0cgroupFieldId\x12-\n\x12su\
    b_group_field_id\x18\x02\x20\x01(\tH\x01R\x0fsubGroupFieldIdB\x17\n\x15o\
    ne_of_group_field_idB\x1b\n\x19one_of_sub_group_field_id\":\n\x08ViewSor\
    t\x12\x1b\n\x08field_id\x18\x01\x20\x01(\tH\0R\x07fieldIdB\x11\n\x0fone_\
    of_field_id\"\xcf\x01\n\x18GridInfoChangesetPayload\x12\x17\n\x07grid_id\
    \x18\x01\x20\x01(\tR\x06gridId\x12%\n\x06filter\x18\x02\x20\x01(\x0b2\
    \x0b.ViewFilterH\0R\x06filter\x12\"\n\x05group\x18\x03\x20\x01(\x0b2\n.V\
    iewGroupH\x01R\x05group\x12\x1f\n\x04sort\x18\x04\x20\x01(\x0b2\t.ViewSo\
    rtH\x02R\x04sortB\x0f\n\rone_of_filterB\x0e\n\x0cone_of_groupB\r\n\x0bon\
    e_of_sortb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
